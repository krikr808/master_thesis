#if 0
void watersystem::calculate_delta_alpha_recursively(octcell* cell)
{
    if (cell->has_child_array()) {
        for (uint idx = 0; idx < octcell::MAX_NUM_CHILDREN; idx++) {
            octcell* c = cell->get_child(idx);
            if (c) {
                /* Child exists */
                calculate_delta_alpha_recursively(c);
            }
        }
        return;
    }

    /* Calculate delta alpha */
    cell->dalpha = 0; // Reset delta alpha
    /* Loop through neighbors */
    nlset lists;
    lists.add_neighbor_list(&cell->neighbor_lists[NL_HIGHER_LEVEL_OF_DETAIL]);
    lists.add_neighbor_list(&cell->neighbor_lists[NL_SAME_LEVEL_OF_DETAIL_LEAF]);
    lists.add_neighbor_list(&cell->neighbor_lists[NL_LOWER_LEVEL_OF_DETAIL_LEAF]);
    for (nlnode* node = lists.get_first_node(); node; node = lists.get_next_node()) {
        if (node->v.vel_out < 0) {
            cell->dalpha -= node->v.vel_out * (node->v.n->alpha - cell->alpha) * node->v.cf_area;
        }
#if  DEBUG
#if  !QUICKFIX1
        if (node->v.vel_out * dt * 4 < -cell->s) {
            throw domain_error("Velocity to high for alpha advection");
        }
#endif
#endif
    }
    cell->dalpha *= dt / cell->get_total_volume();
#if  QUICKFIX1
    if (cell->dalpha < -cell->alpha) {
        cell->dalpha = -cell->alpha;
    }
    else if (cell->dalpha > (1-cell->alpha)) {
        cell->dalpha = (1-cell->alpha);
#if  DEBUG
        if (cell->alpha + cell->dalpha > 1) {
            throw logic_error("Damn...");
        }
#endif
    }
#endif
}
#elif 0
void watersystem::calculate_delta_alpha_recursively(octcell* cell)
{
    if (cell->has_child_array()) {
        for (uint idx = 0; idx < octcell::MAX_NUM_CHILDREN; idx++) {
            octcell* c = cell->get_child(idx);
            if (c) {
                /* Child exists */
                calculate_delta_alpha_recursively(c);
            }
        }
        return;
    }

    /* Calculate mean velocity and alpha gradient */
    cell->alpha_grad_coeff = pfvec(); // Reset alpha gradient
    pfvec mean_vel;
    pfvec area;
    /* Loop though neighbors */
    nlset lists;
    lists.add_neighbor_list(&cell->neighbor_lists[NL_HIGHER_LEVEL_OF_DETAIL]);
    lists.add_neighbor_list(&cell->neighbor_lists[NL_SAME_LEVEL_OF_DETAIL_LEAF]);
    lists.add_neighbor_list(&cell->neighbor_lists[NL_LOWER_LEVEL_OF_DETAIL_LEAF]);
    for (nlnode* node = lists.get_first_node(); node; node = lists.get_next_node()) {
        //cell->alpha_grad.e[node->v.dim] += (node->v.n->alpha - cell->alpha) * (node->v.pos_dir ? node->v.cf_area : -node->v.cf_area);
        cell->alpha_grad_coeff.e[node->v.dim] += (node->v.n->alpha - cell->alpha) * (node->v.pos_dir ? node->v.cf_area : -node->v.cf_area);
        if (node->v.n->is_non_empty()) {
            area.e[node->v.dim] += node->v.cf_area;
            mean_vel.e[node->v.dim] += node->v.cf_area * node->v.get_signed_dir() * node->v.vel_out;
        }
    }
    for (uint dim = 0; dim < NUM_DIMENSIONS; dim++) {
        if (area.e[dim]) {
            mean_vel.e[dim] /= area[dim];
        }
        else {
            /* Don't know the velocity in this direction */
            // TODO: Find out the velocity in some other way
            //mean_vel[dim] = 0; This componentis already 0
        }
    }

    // Optimize
    pftype ideal_length = 1/(INTERFACE_THICKNESS_IN_CELLS * cell->s); // [1/m]
    pftype square_length = cell->alpha_grad_coeff.sqr_length(); // [1/m]
    if (!square_length) {
        return;
    }
    pftype real_length = sqrt(square_length);
    pftype start_distance_in_cells;
    if (cell->alpha <= 0 || cell->alpha >= 1) {
        /* The cell will need some start distance before getting into the interface */
        pftype cells_from_interface = 1/((ideal_length - 2*real_length)/ideal_length); // [1] How many cells outside the interface
        start_distance_in_cells = MAX(cells_from_interface, 0); // [1] The start distance in cells before reaching the interface
    }
    else {
        /* The cell is already in the interface and needs no start distance */
        start_distance_in_cells = 0;
    }
    /* Give the gradient it's proper magnitude */
    cell->alpha_grad_coeff *= ideal_length / real_length;
    cell->dalpha = -cell->alpha_grad_coeff * mean_vel * dt;
    cell->dalpha -= (cell->dalpha > 0 ? 1 : -1)/INTERFACE_THICKNESS_IN_CELLS * start_distance_in_cells;
}
#elif 0
void watersystem::calculate_delta_alpha_recursively(octcell* cell)
{
    if (cell->has_child_array()) {
        for (uint idx = 0; idx < octcell::MAX_NUM_CHILDREN; idx++) {
            octcell* c = cell->get_child(idx);
            if (c) {
                /* Child exists */
                calculate_delta_alpha_recursively(c);
            }
        }
        return;
    }

    /* Calculate mean velocity and alpha gradient */
    cell->dalpha = 0; // Reset alpha gradient
    /* Loop though neighbors */
    nlset lists;
    lists.add_neighbor_list(&cell->neighbor_lists[NL_HIGHER_LEVEL_OF_DETAIL]);
    lists.add_neighbor_list(&cell->neighbor_lists[NL_SAME_LEVEL_OF_DETAIL_LEAF]);
    lists.add_neighbor_list(&cell->neighbor_lists[NL_LOWER_LEVEL_OF_DETAIL_LEAF]);
    for (nlnode* node = lists.get_first_node(); node; node = lists.get_next_node()) {
        if (node->v.vel_out < 0) {
            cell->dalpha -= node->v.vel_out * (node->v.n->alpha - cell->alpha)*node->v.cf_area;
        }
    }
    cell->dalpha /= cell->get_side_area();
    cell->dalpha *= dt;
}
#endif

#if 0
void watersystem::clamp_advect_alpha_recursively(octcell* cell)
{
    if (cell->has_child_array()) {
        for (uint idx = 0; idx < octcell::MAX_NUM_CHILDREN; idx++) {
            octcell* c = cell->get_child(idx);
            if (c) {
                /* Child exists */
                clamp_advect_alpha_recursively(c);
            }
        }
        return;
    }

    /* Calculate d-alpha */
    pftype dwater_density;
    pftype dtotal_density;
    // TODO: Add code for calculating dwater_vol_coeff and dtotal_vol_coeff

    /* Check if cell goes from air cell to non-air cell */
    if (cell->is_air_cell() && dwater_density) {
        /* Set velocities on faces to empty cells */
        pfvec mean_vel;
        pfvec area;
        /* Loop though neighbors */
        nlset lists;
        lists.add_neighbor_list(&cell->neighbor_lists[NL_HIGHER_LEVEL_OF_DETAIL]);
        lists.add_neighbor_list(&cell->neighbor_lists[NL_SAME_LEVEL_OF_DETAIL_LEAF]);
        lists.add_neighbor_list(&cell->neighbor_lists[NL_LOWER_LEVEL_OF_DETAIL_LEAF]);
        for (nlnode* node = lists.get_first_node(); node; node = lists.get_next_node()) {
            if (node->v.n->is_non_air_cell()) {
                /* This velocity is relevant, use it to calculate mean velocity vector */
                area.e[node->v.dim] += node->v.cf_area;
                mean_vel.e[node->v.dim] += node->v.cf_area * node->v.get_signed_dir() * node->v.vel_out;
            }
        }
        for (uint dim = 0; dim < NUM_DIMENSIONS; dim++) {
            if (area.e[dim]) {
                mean_vel.e[dim] /= area[dim];
            }
            else {
                /* Don't know the velocity in this direction */
                // TODO: Find out the velocity in some other way
                //mean_vel[dim] = 0; This componentis already 0
            }
        }
        /* Loop though neighbors */
        lists.add_neighbor_list(&cell->neighbor_lists[NL_HIGHER_LEVEL_OF_DETAIL]);
        lists.add_neighbor_list(&cell->neighbor_lists[NL_SAME_LEVEL_OF_DETAIL_LEAF]);
        lists.add_neighbor_list(&cell->neighbor_lists[NL_LOWER_LEVEL_OF_DETAIL_LEAF]);
        for (nlnode* node = lists.get_first_node(); node; node = lists.get_next_node()) {
            if (node->v.n->is_air_cell()) {
                /* The velocity out for this neighbor connection currently contains humbug, initialize it */
                node->v.set_velocity_out(mean_vel[node->v.dim]*node->v.get_signed_dir());
            }
        }
    }

    /* Update volumes */

    cell->water_density += dwater_density;
    cell->total_density += dtotal_density;
    if (cell->water_density < 0) {
#if  DEBUG
        throw logic_error("Water density becaue negative");
#endif
        //cell->water_density = 0;
    }
    else if (cell->water_density > cell->total_density) {
#if  DEBUG
        throw logic_error("Water density becaue larger than total density");
#endif
        //cell->water_density = cell->total_density;
    }
}
#endif

#if 0
void watersystem::calculate_alpha_gradient_recursively(octcell* cell)
{
    if (cell->has_child_array()) {
        for (uint idx = 0; idx < octcell::MAX_NUM_CHILDREN; idx++) {
            octcell* c = cell->get_child(idx);
            if (c) {
                /* Child exists */
                calculate_alpha_gradient_recursively(c);
            }
        }
        return;
    }

    /* Calculate alpha gradient */
    cell->alpha_grad_coeff = pfvec(); // Reset alpha gradient
    /* Loop though neighbors */
    nlset lists;
    lists.add_neighbor_list(&cell->neighbor_lists[NL_HIGHER_LEVEL_OF_DETAIL]);
    lists.add_neighbor_list(&cell->neighbor_lists[NL_SAME_LEVEL_OF_DETAIL_LEAF]);
    lists.add_neighbor_list(&cell->neighbor_lists[NL_LOWER_LEVEL_OF_DETAIL_LEAF]);
    for (nlnode* node = lists.get_first_node(); node; node = lists.get_next_node()) {
        //cell->alpha_grad.e[node->v.dim] += (node->v.n->alpha - cell->alpha) * (node->v.pos_dir ? node->v.cf_area : -node->v.cf_area);
        cell->alpha_grad_coeff.e[node->v.dim] += node->v.n->alpha * (node->v.pos_dir ? node->v.cf_area : -node->v.cf_area);
    }
    for (uint dim = 0; dim < NUM_DIMENSIONS; dim++) {
        cell->alpha_grad_coeff.e[dim] /= 2 * cell->get_side_area();
    }
}
#endif