%!PS-Adobe-3.1 EPSF-3.0%%Title: (st\214ende_eng_sv)%%Creator: Adobe InDesign 2.0.2%%For: peterkarlsson%%CreationDate: (s\232ndag 10 oktober 2004  23.43.49)%%BoundingBox: 0 0 300 216%%HiResBoundingBox: 0 0 300 216%%CropBox: 0 0 300 216%%LanguageLevel: 2%%DocumentNeededResources: (atend)%%DocumentSuppliedResources: (atend)%%DocumentNeededFeatures: (atend)%%DocumentSuppliedFeatures: (atend)%%DocumentData: Binary%%Pages: (atend)%%DocumentProcessColors: (atend)%%DocumentCustomColors: (atend)%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 62 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 206 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin		/dictstackcount countdictstack def		/showpage {} def	mark} def/graphic_cleanup{	cleartomark		dictstackcount 1 countdictstack 1 sub {end}for		end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.18 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.18 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined{/Adobe_CoolType_Core userdict/Adobe_CoolType_Coreget def}if userdict/Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.18 def/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2? not{/currentglobal falsedef/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict def}if currentpacking truesetpacking/@_SaveStackLevels{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array putput get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1index exch 0 exch putinterval 1 index exch/args exch put}{pop}ifelse}ifelsebegin count 2 sub 1 index lt{pop count 1 sub}if dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch getinterval astore pop}{pop}ifelsecount 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add defcountdictstack 1 sub @dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel @dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def currentglobal truesetglobal/CTHasResourceForAllBug Level2?{1 dict dup begin mark{(*){pop stop}128 string/Category resourceforall}stopped cleartomark currentdict eq dup{end}if not}{false}ifelse def/CTHasResourceStatusBug Level2?{mark{/steveamerige/Category resourcestatus}stopped{cleartomark true}{cleartomark currentglobalnot}ifelse}{false}ifelse def setglobal/CTResourceStatus{mark 3 1 roll/Categoryfindresource begin({ResourceStatus} stopped)0()/SubFileDecode filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse end}bind def/CTWorkAroundBugs{Level2?{/cid_PreLoad/ProcSet resourcestatus{pop popcurrentglobal mark{(*){dup/CMap CTHasResourceStatusBug{CTResourceStatus}{resourcestatus}ifelse{pop dup 0 eq exch 1 eq or{dup/CMap findresource gchecksetglobal/CMap undefineresource}{pop CTHasResourceForAllBug{exit}{stop}ifelse}ifelse}{pop}ifelse}128 string/CMap resourceforall}stopped{cleartomark}stoppedpop setglobal}if}if}bind def/doc_setup{Adobe_CoolType_Core beginCTWorkAroundBugs/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 10 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def/InVMFontsByCMap 10 dict def/InVMDeepCopiedFonts 10 dictdef end put}bind def/doc_trailer{currentdict Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}binddef/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfontsystemdict begin userdict begin/globaldict where{/globaldict get begin}if dupwhere pop exch get/globaldict where{pop end}if end endAdobe_CoolType_Core_Defined{/systemfindfont exch def}{/findfont 1 index def/systemfindfont exch def}ifelse/undefinefont{pop}ndf/copyfont{currentglobal 31 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 indexlength add 1 add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dupnull eq{pop}{{def}forall}ifelse currentdict end exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup length array copy exchsetglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 indexknown{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory 3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1 roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1 index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def currentdict end definefontpop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies known{exch $Strategies exch 2copy known{get 2 copy maxlength exch maxlength add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get exec}if end/$Strategy exchdef}{pop pop pop}ifelse}{pop pop}ifelse end}bind def/scff{$SubstituteFontbegin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def/$inVMIndex $sname null eq{1 index $str cvs dup length $slensub $slen getinterval cvn}{$sname}ifelse def end{findfont}@Stopped{dup length8 add string exch 1 index 0(BadFont:)putinterval 1 index exch 8 exch duplength string cvs putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if$SubstituteFont begin/$sname null def/$slen 0 def/$inVMIndex null def end}binddef/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$inVMIndex null def/$doSmartSub true def/$depth 0def/$fontname null def/$italicangle 26.5 def/$dstack null def/$Strategies 10dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dictbegin/UseFont exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup0 1 255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dupbegin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch Adobe_CoolType_Data/InVMDeepCopiedFonts get 1 index/FontName get known{pop Adobe_CoolType_Data/InVMDeepCopiedFonts get 1 indexget null copyfont}{$deepcopyfont}ifelse exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefontAdobe_CoolType_Data/InVMDeepCopiedFonts get begin dup/FontBasedOn get 1 indexdef end}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0 setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120sub x 10 div exch moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlinetoclosepath gsave Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal exch dup gcheck setglobal null copyfont begin/FontBasedOncurrentdict/FontName known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName $fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup sin exch cos div 1 0 0]matrixconcatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict enddefinefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique SetSubstituteStrategy/$findfontByEnum{duptype/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs duplength $slen sub $slen getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def $SubstituteFont/$dstackcountdictstack array dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdicttrue $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{beginfalse}ifelse}forall pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dupbegin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict dup/FontName/copied put copyfontbegin/FDepVector FDepVector copyarray 0 1 2 index length 1 sub{2 copy get$deepcopyfont dup/FontName/copied put/copied exch definefont 3 copy put poppop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}binddef/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index$cmapname $fontpat cvs putinterval $cmapname length add $str exch 0 exchgetinterval cvn}bind def/$findfontByROS{/$fontname exch def $ROS Registry 2copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelsefalse exch{dup/CIDFont resourcestatus{pop pop save 1 index/CIDFontfindresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch popexch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs$buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnlyknown{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get dup/Registryget Registry eq exch/Ordering get Ordering eq and and{exch restore exch poptrue exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end currentdict/$errorknown currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Categoryresourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def duplength $slen gt $sname null ne or $slen 0 gt and{$sname null eq{dup $str cvsdup length $slen sub $slen getinterval cvn}{$sname}ifelse Adobe_CoolType_Data/InVMFontsByCMap get 1 index 2 copy known{get false exch{pop currentglobal{GlobalFontDirectory 1 index known{exch pop true exit}{pop}ifelse}{FontDirectory 1 index known{exch pop true exit}{GlobalFontDirectory 1 indexknown{exch pop true exit}{pop}ifelse}ifelse}ifelse}forall}{pop pop false}ifelse{exch pop exch pop}{dup/CMap resourcestatus{pop pop dup/$cmapname exchdef/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 stringcvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop poppop $findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 indexsub exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll addgetinterval exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1 roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for duptype/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop$findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$findfontByEnum}{//SubstituteFont exec}ifelse end}}ifelse bind readonlydef Adobe_CoolType_Core/scfindfont/systemfindfont load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName getdup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound true def}if exch pop{$slen 0 gt$sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfontdup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forallcurrentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse$origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core_Defined not{Adobe_CoolType_Core/findfont{$SubstituteFontbegin $depth 0 eq{/$fontname 1 index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont$SubstituteFont begin/$depth $depth 1 sub def $substituteFound $depth 0 eq and{$inVMIndex null ne{dup $inVMIndex $AddInVMFont}if $doSmartSub{currentdict/$Strategy known{$Strategy/$BuildFont get exec}if}if}if end}bind put}if}if end/$AddInVMFont{exch/FontName 2 copy known{get 1 dict dup begin exch 1 indexgcheck def end exch Adobe_CoolType_Data/InVMFontsByCMap get exch $DictAdd}{poppop pop}ifelse}bind def/$DictAdd{2 copy known not{2 copy 4 index length dictput}if Level2? not{2 copy get dup maxlength exch length 4 index length add lt2 copy get dup length 4 index length add exch maxlength 1 index lt{2 mul dictbegin 2 copy get{forall}def 2 copy currentdict put end}{pop}ifelse}if getbegin{def}forall end}bind def end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.14 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.14 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_BadResourceImplementation? ct_Level2?{savecurrentglobal true setglobal/Generic/Category findresource dup length dictcopy dup/InstanceType/dicttype put/egiremaevets exch/Category defineresourcepop setglobal/foo 1 dict dup/s 3 put/egiremaevets defineresource pop restoremark{/bar 1 dict dup/a 7 put/egiremaevets defineresource}stopped{cleartomarktrue}{cleartomark false}ifelse currentglobal true setglobal/egiremaevets/Category undefineresource setglobal}{false}ifelse def/ct_UseNativeCapability?systemdict/composefont known def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2string def/dst_string 1500 string def/nullstring()def/usewidths? true def enddef ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel known{pop/CIDFont findresource/GlyphDirectory get}{1index/CIDFont findresource/GlyphDirectory get dup type/dicttype eq{dup dupmaxlength exch length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3dict begin/vm exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm setglobal/gvm currentglobal def $ gcheck setglobal}if?{$ begin}if}def/?{$ type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data beginbegin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256mod put stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3 1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevelknown{gvm setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001 0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch errordict exch get exec stop}bind def/ct_reraise{cvx$error/errorname get(Error: )print dup(                    )cvs printerrordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1roll{2 index exch get exch 8 bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dupdst_string length gt{dup string/dst_string exch def}if 1 index ct_CID_STR_SIZEidiv/arrayIndex exch def 2 index arrayIndex get 2 index arrayIndexct_CID_STR_SIZE mul sub{dup 3 index add 2 index length le{2 index getintervaldst_string dst_index 2 index putinterval length dst_index add/dst_index exchdef exit}{1 index length 1 index sub dup 4 1 roll getinterval dst_stringdst_index 2 index putinterval pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2 index dup length arrayIndex gt{arrayIndexget}{pop exit}ifelse 0}ifelse}loop pop pop pop dst_string 0 dst_indexgetinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark truesetglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomarksetglobal true}{cleartomark currentglobal not exch setglobal}ifelse{{mark 3 1roll/Category findresource begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobalend}}{{resourcestatus}}ifelse bind def ct_BadResourceImplementation?{currentglobal true setglobal/CIDFont/Category undefineresource setglobal}if/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 70 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				has_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict/Width get def			/Height DataDict/Height get def			/ImageMatrix DataDict/ImageMatrix get def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [1 0] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/has_mask{	dup type /dicttype eq	{		dup /Mask known	{dup /Mask get}{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin		dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf		begin	gsave		0 1 translate 1 -1 Height div scale		1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse				<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [1 0]		>>		imagemask				grestore				0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					has_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						image					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								has_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			has_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def		/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def		{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: 3 1%%EndPageComments%%BeginPageSetupAdobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -216 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark% page clipgsavenewpathgsave % PSGState0 0 mo0 216 li300 216 li300 0 liclp[1 0 0 1 0 0 ] concat33.6772 173.391 mo33.6772 169.853 li26.1115 169.853 li26.1115 150.273 li21.9083 150.273 li21.9083 173.391 li33.6772 173.391 licp39.1621 173.391 mo39.1621 157.174 li35.2041 157.174 li35.2041 173.391 li39.1621 173.391 licp54.3915 173.391 mo54.3915 161.412 li54.3915 158.4 53.3758 156.788 50.5036 156.788 cv48.7872 156.788 47.6314 157.769 46.2653 159.345 cv46.2653 157.104 li42.2373 157.104 li42.2373 173.391 li46.2653 173.391 li46.2653 162.813 li46.5455 162.323 li47.8766 160.151 48.9624 160.046 49.2075 160.046 cv49.3127 160.046 49.4177 160.046 49.4878 160.081 cv50.3284 160.256 50.3635 161.587 50.3635 162.182 cv50.3635 173.391 li54.3915 173.391 licp68.9027 173.391 mo64.4894 164.634 li68.8327 157.139 li64.8046 157.139 li61.3369 163.443 li61.3369 147.856 li57.3439 147.856 li57.3439 173.391 li61.3369 173.391 li61.3369 165.965 li64.7696 173.391 li68.9027 173.391 licp82.9481 165.265 mo82.9481 160.466 80.251 156.683 76.0128 156.683 cv71.7746 156.683 69.0775 160.466 69.0775 165.265 cv69.0775 170.098 71.7746 173.846 76.0128 173.846 cv80.251 173.846 82.9481 170.098 82.9481 165.265 cvcp91.319 173.846 mo89.8829 173.846 89.2174 173.531 88.8672 173.321 cv88.8672 181.552 li84.8391 181.552 li84.8391 157.104 li88.8672 157.104 li88.8672 159.135 li89.4276 158.084 90.5835 156.648 92.615 156.648 cv95.9426 156.648 98.0442 160.116 98.0442 164.774 cv98.0442 169.853 95.3821 173.846 91.319 173.846 cvcp104.093 173.391 mo104.093 157.174 li100.136 157.174 li100.136 173.391 li104.093 173.391 licp119.323 173.391 mo119.323 161.412 li119.323 158.4 118.307 156.788 115.435 156.788 cv113.719 156.788 112.563 157.769 111.197 159.345 cv111.197 157.104 li107.169 157.104 li107.169 173.391 li111.197 173.391 li111.197 162.813 li111.477 162.323 li112.808 160.151 113.894 160.046 114.139 160.046 cv114.244 160.046 114.349 160.046 114.419 160.081 cv115.26 160.256 115.295 161.587 115.295 162.182 cv115.295 173.391 li119.323 173.391 licp135.323 160.011 mo135.323 157.069 li132.205 157.314 li130.664 157.314 li129.403 156.788 128.633 156.648 127.652 156.648 cv123.694 156.648 121.697 159.696 121.697 162.883 cv121.697 164.424 122.083 165.72 122.818 166.841 cv123.133 167.296 123.519 167.752 124.394 168.347 cv124.044 168.592 123.764 168.802 123.449 169.013 cv122.608 169.608 121.487 170.519 121.487 171.675 cv121.487 172.585 121.978 173.181 123.379 173.846 cv121.767 175.563 121.207 176.613 121.207 177.839 cv121.207 180.186 123.203 181.903 126.951 181.903 cv131.855 181.903 134.832 178.855 134.832 174.897 cv134.832 172.375 133.817 171.114 130.734 171.114 cv126.111 171.114 li125.83 171.114 125.655 171.079 125.585 170.939 cv125.515 170.834 125.55 170.659 125.55 170.519 cv125.55 170.063 125.971 169.538 126.776 168.802 cv127.021 168.802 127.267 168.838 127.512 168.838 cv131.47 168.838 133.571 166.281 133.571 162.638 cv133.571 161.622 133.396 160.957 132.836 160.011 cv135.323 160.011 licp147.347 158.224 mo145.771 157.104 143.949 156.543 141.988 156.543 cv138.275 156.543 136.348 158.715 136.348 161.657 cv136.348 163.794 137.469 164.95 139.676 166.211 cv140.412 166.596 141.322 166.946 142.023 167.401 cv142.758 167.857 143.319 168.417 143.319 169.258 cv143.319 170.204 142.478 170.834 141.217 170.834 cv140.272 170.834 139.571 170.589 138.94 170.239 cv138.31 169.888 137.785 169.433 137.224 168.978 cv135.928 172.025 li137.715 173.146 139.466 173.846 141.603 173.846 cv145.28 173.846 147.172 171.535 147.172 169.258 cv147.172 166.631 146.576 165.755 144.335 164.424 cv143.529 163.934 142.513 163.548 141.708 163.058 cv140.902 162.568 140.236 161.972 140.236 161.167 cv140.236 160.186 141.147 159.555 142.408 159.555 cv143.634 159.555 144.58 160.081 145.455 160.816 cv145.666 160.957 145.841 161.132 146.016 161.272 cv147.347 158.224 licp167.662 173.391 mo167.662 157.104 li163.634 157.104 li163.634 167.682 li163.144 168.382 li161.918 170.239 160.937 170.449 160.657 170.449 cv160.622 170.449 160.587 170.449 160.552 170.449 cv159.606 170.379 159.536 168.978 159.536 168.312 cv159.536 157.104 li155.508 157.104 li155.508 169.083 li155.508 172.095 156.524 173.671 159.396 173.671 cv161.112 173.671 162.268 172.726 163.634 171.149 cv163.634 173.391 li167.662 173.391 licp182.937 173.391 mo182.937 161.412 li182.937 158.4 181.921 156.788 179.049 156.788 cv177.333 156.788 176.177 157.769 174.811 159.345 cv174.811 157.104 li170.783 157.104 li170.783 173.391 li174.811 173.391 li174.811 162.813 li175.091 162.323 li176.422 160.151 177.508 160.046 177.753 160.046 cv177.858 160.046 177.963 160.046 178.033 160.081 cv178.874 160.256 178.909 161.587 178.909 162.182 cv178.909 173.391 li182.937 173.391 licp189.847 173.391 mo189.847 157.174 li185.889 157.174 li185.889 173.391 li189.847 173.391 licp204.593 157.104 mo200.67 157.104 li198.359 166.526 li198.218 167.016 197.973 168.627 197.973 168.627 cv197.973 168.627 197.728 166.981 197.623 166.526 cv195.381 157.104 li191.318 157.104 li195.872 173.391 li199.549 173.391 li204.593 157.104 licp217.252 165.755 mo217.252 164.109 li217.252 159.731 215.15 156.648 211.437 156.648 cv206.778 156.648 204.502 160.011 204.502 165.685 cv204.502 170.589 207.304 173.846 211.192 173.846 cv213.679 173.846 215.29 173.391 217.181 172.27 cv215.955 169.398 li214.554 170.169 213.293 170.554 211.612 170.554 cv209.686 170.554 208.705 168.417 208.6 166.841 cv208.565 166.561 208.565 166.246 208.565 165.755 cv217.252 165.755 licp226.919 162.077 mo226.498 161.727 226.078 161.517 225.553 161.517 cv224.011 161.517 223.311 163.548 223.311 165.93 cv223.311 173.391 li219.318 173.391 li219.318 157.104 li222.856 157.104 li222.996 160.396 li223.556 158.4 224.677 156.858 225.798 156.858 cv226.498 156.858 227.409 157.209 227.969 157.979 cv226.919 162.077 licp238.162 161.272 mo237.987 161.132 237.812 160.957 237.602 160.816 cv236.726 160.081 235.78 159.555 234.554 159.555 cv233.293 159.555 232.382 160.186 232.382 161.167 cv232.382 161.972 233.048 162.568 233.854 163.058 cv234.659 163.548 235.675 163.934 236.481 164.424 cv238.722 165.755 239.318 166.631 239.318 169.258 cv239.318 171.535 237.426 173.846 233.749 173.846 cv231.612 173.846 229.861 173.146 228.074 172.025 cv229.37 168.978 li229.931 169.433 230.456 169.888 231.087 170.239 cv231.717 170.589 232.418 170.834 233.363 170.834 cv234.624 170.834 235.465 170.204 235.465 169.258 cv235.465 168.417 234.904 167.857 234.169 167.401 cv233.468 166.946 232.558 166.596 231.822 166.211 cv229.615 164.95 228.495 163.794 228.495 161.657 cv228.495 158.715 230.421 156.543 234.134 156.543 cv236.095 156.543 237.917 157.104 239.493 158.224 cv238.162 161.272 licp241.419 173.391 mo241.419 157.174 li245.377 157.174 li245.377 173.391 li241.419 173.391 licp255.734 172.585 mo254.684 173.321 253.633 173.846 252.267 173.846 cv250.025 173.846 249.465 172.69 249.465 170.344 cv249.465 160.116 li247.503 160.116 li247.503 157.559 li249.465 157.139 li249.465 152.235 li253.177 152.235 li253.177 157.104 li256.05 157.104 li256.05 160.116 li253.177 160.116 li253.177 167.436 li253.177 169.153 253.247 170.063 253.913 170.063 cv254.649 170.063 255.139 169.468 255.699 169.118 cv256.715 171.815 li256.4 172.095 256.085 172.34 255.734 172.585 cvcp261.268 165.755 mo261.268 166.246 261.268 166.561 261.304 166.841 cv261.409 168.417 262.389 170.554 264.316 170.554 cv265.997 170.554 267.258 170.169 268.659 169.398 cv269.885 172.27 li267.994 173.391 266.382 173.846 263.895 173.846 cv260.007 173.846 257.205 170.589 257.205 165.685 cv257.205 160.011 259.482 156.648 264.141 156.648 cv267.854 156.648 269.955 159.731 269.955 164.109 cv269.955 165.755 li261.268 165.755 licp280.253 171.815 mo279.237 169.118 li278.677 169.468 278.186 170.063 277.451 170.063 cv276.785 170.063 276.715 169.153 276.715 167.436 cv276.715 160.116 li279.587 160.116 li279.587 157.104 li276.715 157.104 li276.715 152.235 li273.002 152.235 li273.002 157.139 li271.041 157.559 li271.041 160.116 li273.002 160.116 li273.002 170.344 li273.002 172.69 273.563 173.846 275.804 173.846 cv277.17 173.846 278.221 173.321 279.272 172.585 cv279.622 172.34 279.938 172.095 280.253 171.815 cvcp78.8149 165.265 mo78.8149 168.908 77.2387 170.764 76.0128 170.764 cv74.7869 170.764 73.2457 169.013 73.2457 165.265 cv73.2457 161.832 74.7869 159.766 76.0128 159.766 cv77.2387 159.766 78.8149 161.832 78.8149 165.265 cvcp91.4591 159.976 mo90.4433 159.976 89.2524 161.622 88.8672 162.568 cv88.8672 168.032 li88.8672 169.328 89.4276 170.694 90.9688 170.694 cv92.4049 170.694 93.876 168.522 93.876 165.02 cv93.876 162.007 92.7902 159.976 91.4591 159.976 cvcp129.508 162.743 mo129.508 165.475 128.387 166.07 127.652 166.07 cv126.916 166.07 125.796 165.51 125.796 162.778 cv125.796 160.116 126.916 159.415 127.617 159.415 cv128.352 159.415 129.508 160.081 129.508 162.743 cvcp131.225 175.563 mo131.225 177.314 129.298 178.89 127.442 178.89 cv125.936 178.89 124.64 177.98 124.64 176.824 cv124.64 175.948 125.06 175.142 125.55 174.267 cv129.894 174.267 li131.05 174.267 131.225 174.932 131.225 175.563 cvcp213.223 163.373 mo208.74 163.373 li208.81 160.886 209.756 159.555 211.192 159.555 cv212.313 159.555 213.118 160.746 213.223 163.373 cvcp263.895 159.555 mo262.459 159.555 261.514 160.886 261.444 163.373 cv265.927 163.373 li265.822 160.746 265.016 159.555 263.895 159.555 cvfalse sop0 0 0 1 cmykf128.487 30.3393 mo128.487 57.7502 li149.639 69.9265 li149.639 54.8873 li142.993 51.0064 li142.993 30.3393 li128.487 30.3393 li0 0 0 1 cmykf158.043 30.3386 mo158.043 51.0064 li151.395 54.8873 li151.395 69.9265 li172.404 57.701 li172.404 30.3386 li158.043 30.3386 li0 0 0 1 cmykf152.274 71.4554 mo173.428 59.1335 li196.955 72.7663 li189.727 85.283 li172.069 75.0463 li165.423 78.977 li152.274 71.4554 li0 0 0 1 cmykf151.395 72.9635 mo151.395 97.5453 li174.974 111.228 li182.224 98.6055 li164.399 88.2447 li164.399 80.3374 li151.395 72.9635 li0 0 0 1 cmykf149.635 72.9635 mo149.635 97.5662 li126.272 111.22 li118.974 98.4884 li136.73 88.1549 li136.73 80.4418 li149.635 72.9635 li0 0 0 1 cmykf127.641 59.199 mo148.744 71.4728 li135.84 79.041 li128.951 75.0629 li111.244 85.3958 li103.967 72.928 li127.641 59.199 li0 0 0 1 cmykf205.298 71.0717 mo208.344 72.9106 li211.39 71.0717 li208.344 69.2329 li205.298 71.0717 licp0 0 0 1 cmyk0.5 lw0 lc0 lj4 ml[] 0 dshtrue sadjgsave[1.02707 -1.02707 1.02707 1.02707 387.589 564.035 ] concatsgrestore newpath89.0927 71.0717 mo92.139 72.9106 li95.1852 71.0717 li92.139 69.2329 li89.0927 71.0717 licp0 0 0 1 cmykgsave[1.02707 -1.02707 1.02707 1.02707 271.384 564.035 ] concatsgrestore newpath92.7466 88.4954 mo92.6164 87.9621 li91.7101 88.1722 li91.1027 85.683 li96.7785 84.3671 li97.0496 85.4784 li97.644 85.3406 li96.8269 81.9921 li96.2326 82.1299 li96.5037 83.2411 li90.7834 84.5672 li90.5122 83.456 li89.9625 83.5835 li91.2459 88.8434 li92.7466 88.4954 licp93.4993 93.7719 mo93.1193 92.693 li98.6632 90.7586 li99.0432 91.8374 li99.6192 91.6365 li98.4742 88.3855 li97.8982 88.5864 li98.2782 89.6653 li92.7342 91.5998 li92.3542 90.5209 li91.8214 90.7068 li92.9665 93.9578 li93.4993 93.7719 licp102.699 99.6649 mo103.208 100.69 li103.753 100.415 li102.388 97.669 li101.844 97.944 li102.36 98.982 li98.4659 100.949 li100.997 94.8691 li100.121 93.1073 li99.5765 93.3824 li100.052 94.3384 li99.8334 94.7904 li94.9463 97.2591 li94.4373 96.2348 li93.9336 96.4892 li95.2978 99.2345 li95.8015 98.98 li95.2856 97.942 li99.3015 95.9134 li96.6413 102.213 li96.8449 102.622 li102.699 99.6649 licp103.515 111.049 mo103.057 110.421 li104.003 106.153 li107.474 106.513 li108.031 107.277 li108.527 106.921 li106.999 104.826 li106.503 105.182 li106.89 105.712 li103.031 105.312 li102.014 109.949 li103.057 111.379 li103.515 111.049 licp101.214 107.895 mo100.54 106.971 li105.308 103.543 li105.982 104.468 li106.478 104.111 li104.446 101.327 li103.951 101.683 li104.625 102.607 li99.857 106.034 li99.183 105.11 li98.7248 105.439 li100.756 108.224 li101.214 107.895 licp106.166 114.935 mo107.509 116.31 109.934 116.305 111.374 114.92 cv112.792 113.556 112.862 111.161 111.519 109.786 cv110.156 108.39 107.752 108.373 106.323 109.748 cv104.872 111.143 104.802 113.538 106.166 114.935 cvcp114.317 110.163 mo114.625 109.867 114.644 109.384 114.345 109.078 cv114.047 108.773 113.56 108.776 113.252 109.072 cv112.955 109.358 112.937 109.841 113.235 110.146 cv113.533 110.452 114.021 110.449 114.317 110.163 cvcp112.293 108.09 mo112.601 107.794 112.619 107.311 112.321 107.005 cv112.023 106.7 111.535 106.703 111.228 106.999 cv110.931 107.284 110.912 107.767 111.211 108.073 cv111.509 108.379 111.996 108.375 112.293 108.09 cvcp111.047 110.219 mo111.942 111.136 111.688 112.819 110.457 114.003 cv109.215 115.198 107.523 115.408 106.617 114.48 cv105.722 113.564 105.998 111.881 107.24 110.686 cv108.46 109.513 110.152 109.303 111.047 110.219 cvcp113.252 120.248 mo112.362 119.531 li115.998 114.92 li116.687 115.475 li117.4 116.049 117.464 116.806 116.859 117.572 cv116.283 118.302 115.359 118.439 114.682 117.894 cv114.599 117.827 114.561 117.777 114.463 117.679 cv114.161 118.062 li114.358 118.28 114.444 118.368 114.622 118.512 cv115.727 119.401 117.111 119.321 117.904 118.316 cv118.688 117.322 118.514 116.163 117.457 115.312 cv114.583 112.997 li114.205 113.476 li115.096 114.193 li111.459 118.803 li110.568 118.086 li110.219 118.529 li112.903 120.691 li113.252 120.248 licp119.746 124.625 mo118.775 124.02 li121.872 119.031 li122.842 119.637 li123.164 119.118 li120.24 117.293 li119.918 117.811 li120.888 118.417 li117.792 123.406 li116.822 122.8 li116.524 123.28 li119.448 125.105 li119.746 124.625 licp130.598 123.451 mo131.634 123.935 li131.886 123.379 li129.108 122.082 li128.857 122.638 li129.907 123.129 li128.107 127.102 li126.275 120.76 li124.493 119.927 li124.241 120.483 li125.208 120.935 li125.321 121.425 li123.062 126.413 li122.026 125.929 li121.793 126.443 li124.571 127.74 li124.804 127.226 li123.753 126.736 li125.61 122.637 li127.478 129.232 li127.892 129.426 li130.598 123.451 licp137.658 129.759 mo138.776 130.062 li138.922 129.516 li135.58 128.612 li135.435 129.157 li136.554 129.46 li136.098 131.169 li135.595 131.16 135.381 131.133 135.087 131.054 cv133.335 130.58 132.444 128.948 132.931 127.121 cv133.371 125.47 134.85 124.543 136.396 124.962 cv136.97 125.117 137.391 125.373 137.963 125.891 cv137.782 126.569 li138.327 126.717 li138.794 124.963 li138.25 124.816 li138.144 125.213 li137.379 124.706 136.961 124.498 136.387 124.343 cv134.237 123.761 132.176 124.863 131.63 126.911 cv131.076 128.989 132.28 130.926 134.503 131.528 cv135.342 131.755 135.992 131.804 137.135 131.719 cv137.658 129.759 licp141.18 132.426 mo141.73 132.827 142.254 133.055 142.83 133.121 cv144.088 133.265 145.135 132.51 145.276 131.375 cv145.399 130.391 145.096 129.865 143.883 128.99 cv143.588 128.772 143.25 128.518 142.885 128.246 cv142.407 127.884 142.267 127.654 142.316 127.26 cv142.393 126.639 142.912 126.3 143.624 126.381 cv144.033 126.428 144.297 126.535 144.848 126.92 cv144.754 127.677 li145.314 127.741 li145.541 125.925 li144.98 125.861 li144.933 126.239 li144.524 125.947 144.098 125.79 143.597 125.733 cv142.385 125.595 141.323 126.348 141.187 127.438 cv141.076 128.331 141.464 128.913 142.715 129.731 cv143.893 130.51 144.253 130.951 144.182 131.526 cv144.108 132.116 143.51 132.477 142.752 132.391 cv142.237 132.332 141.83 132.147 141.269 131.715 cv141.367 130.928 li140.806 130.864 li140.57 132.755 li141.131 132.82 li141.18 132.426 licp158.764 125.892 mo155.705 126.086 li155.752 126.694 li156.893 126.622 li157.185 130.424 li157.28 131.656 156.526 132.59 155.384 132.662 cv154.273 132.732 153.462 131.928 153.366 130.681 cv153.073 126.864 li154.23 126.79 li154.183 126.182 li150.728 126.401 li150.775 127.009 li151.931 126.936 li152.249 131.073 li152.359 132.502 153.627 133.476 155.255 133.373 cv156.99 133.263 158.091 132.063 157.965 130.42 cv157.67 126.573 li158.811 126.5 li158.764 125.892 licp166.394 124.616 mo167.505 124.345 li167.362 123.752 li164.384 124.478 li164.527 125.071 li165.653 124.797 li166.679 129.036 li161.346 125.22 li159.435 125.686 li159.579 126.279 li160.616 126.026 li161.005 126.339 li162.292 131.661 li161.181 131.932 li161.314 132.48 li164.292 131.754 li164.159 131.205 li163.033 131.48 li161.976 127.107 li167.491 131.099 li167.936 130.99 li166.394 124.616 licp173.695 128.148 mo172.626 128.555 li170.529 123.071 li171.598 122.664 li171.38 122.094 li168.158 123.319 li168.376 123.889 li169.446 123.482 li171.543 128.967 li170.474 129.373 li170.675 129.9 li173.897 128.676 li173.695 128.148 licp178.014 119.466 mo178.581 119.167 li178.303 118.624 li176.347 119.655 li176.625 120.199 li177.394 119.793 li177.842 124.885 li173.954 121.608 li174.804 121.159 li174.526 120.616 li171.909 121.997 li172.187 122.54 li172.848 122.191 li178.292 126.803 li178.616 126.632 li178.014 119.466 licp186.367 119.901 mo185.904 120.223 li186.36 120.89 li184.229 122.367 li182.723 120.164 li184.328 119.051 li184.758 119.681 li185.222 119.36 li184.026 117.609 li183.571 117.943 li183.983 118.548 li182.379 119.66 li180.942 117.557 li182.998 116.132 li183.445 116.787 li183.897 116.474 li182.933 115.064 li182.469 115.385 li182.641 115.637 li178.706 118.365 li179.024 118.831 li179.964 118.179 li183.302 123.066 li182.362 123.717 li182.68 124.183 li187.167 121.073 li186.367 119.901 licp193.887 114.427 mo193.575 114.718 li193.329 114.947 192.994 115.009 192.548 114.903 cv190.114 114.335 li190.727 113.514 190.682 112.535 189.994 111.779 cv189.163 110.866 188.141 110.921 187.058 111.929 cv184.424 114.381 li184.834 114.832 li185.672 114.053 li189.623 118.397 li188.786 119.176 li189.166 119.593 li191.688 117.245 li191.309 116.828 li190.472 117.607 li188.768 115.734 li189.315 115.225 li192.162 115.929 li192.831 116.098 192.961 116.06 193.452 115.603 cv194.267 114.844 li193.887 114.427 licp186.52 113.263 mo187.301 112.536 li187.882 111.996 188.513 112.054 189.087 112.686 cv189.652 113.307 189.686 114.046 189.15 114.545 cv188.357 115.283 li186.52 113.263 licp195.769 112.706 mo196.409 112.469 196.891 112.158 197.265 111.716 cv198.083 110.749 198.031 109.464 197.16 108.723 cv196.404 108.081 195.796 108.044 194.392 108.571 cv194.046 108.697 193.647 108.838 193.216 108.993 cv192.649 109.191 192.378 109.181 192.076 108.924 cv191.6 108.519 191.603 107.901 192.066 107.354 cv192.332 107.039 192.567 106.879 193.195 106.632 cv193.776 107.126 li194.14 106.696 li192.746 105.51 li192.382 105.941 li192.672 106.188 li192.201 106.367 191.834 106.636 191.509 107.02 cv190.721 107.952 190.763 109.249 191.599 109.96 cv192.285 110.543 192.987 110.54 194.365 109.95 cv195.67 109.398 196.238 109.34 196.679 109.716 cv197.132 110.101 197.103 110.797 196.611 111.379 cv196.276 111.775 195.896 112.012 195.223 112.241 cv194.619 111.727 li194.255 112.158 li195.707 113.393 li196.071 112.962 li195.769 112.706 licp201.271 105.086 mo200.619 106.026 li195.773 102.71 li196.425 101.77 li195.921 101.426 li193.958 104.258 li194.461 104.603 li195.113 103.663 li199.959 106.978 li199.307 107.918 li199.773 108.237 li201.737 105.404 li201.271 105.086 licp204.764 98.9265 mo204.159 100.073 li198.966 97.3312 li200.005 95.3618 li200.761 95.7606 li201.024 95.2615 li199.46 94.4354 li199.196 94.9345 li199.466 95.077 li196.847 100.041 li196.577 99.8984 li196.321 100.384 li197.886 101.211 li198.142 100.725 li197.386 100.326 li198.426 98.3563 li203.618 101.099 li203.013 102.245 li203.512 102.509 li205.263 99.19 li204.764 98.9265 licp207.346 90.4377 mo207.145 90.9651 li207.903 91.2461 li206.982 93.6696 li204.479 92.7419 li205.173 90.9172 li205.888 91.1822 li206.088 90.6548 li204.101 89.918 li203.914 90.4508 li204.601 90.7052 li203.907 92.53 li201.519 91.6448 li202.408 89.3068 li203.151 89.5824 li203.346 89.0693 li201.745 88.4756 li201.544 89.003 li201.83 89.1091 li200.128 93.5854 li200.658 93.7815 li201.064 92.7123 li206.613 94.7689 li206.206 95.8381 li206.735 96.0342 li208.676 90.9306 li207.346 90.4377 licp209.841 83.9142 mo209.565 85.1809 li203.843 83.8592 li204.317 81.6835 li205.149 81.8758 li205.269 81.3244 li203.545 80.9262 li203.425 81.4776 li203.722 81.5463 li202.529 87.0302 li202.231 86.9615 li202.115 87.498 li203.839 87.8962 li203.955 87.3597 li203.123 87.1675 li203.597 84.9918 li209.318 86.3135 li209.042 87.5801 li209.592 87.7071 li210.39 84.0412 li209.841 83.9142 li0 0 0 1 cmykf96.4209 55.8128 mo96.2907 56.3462 li97.1939 56.569 li96.5866 59.0582 li90.9302 57.6626 li91.2014 56.5514 li90.6091 56.4052 li89.792 59.7537 li90.3843 59.8999 li90.6555 58.7886 li96.3562 60.1952 li96.085 61.3065 li96.6329 61.4416 li97.9164 56.1818 li96.4209 55.8128 licp98.9494 51.638 mo98.5694 52.7169 li93.0511 50.7101 li93.4311 49.6312 li92.8577 49.4227 li91.7127 52.6738 li92.286 52.8822 li92.666 51.8033 li98.1843 53.8102 li97.8044 54.889 li98.3347 55.0819 li99.4798 51.8309 li98.9494 51.638 licp97.4999 41.2383 mo98.0337 40.2266 li97.4922 39.9456 li96.0617 42.6568 li96.6032 42.9379 li97.1441 41.9127 li101.016 43.9221 li94.6028 45.422 li93.6847 47.1621 li94.2262 47.4431 li94.7243 46.4989 li95.2186 46.4118 li100.079 48.934 li99.5446 49.9457 li100.046 50.2056 li101.476 47.4944 li100.976 47.2344 li100.435 48.2596 li96.4408 46.187 li103.108 44.664 li103.321 44.2594 li97.4999 41.2383 licp108.216 36.0914 mo107.757 36.7198 li103.393 37.1387 li102.666 33.7361 li103.223 32.9721 li102.731 32.6122 li101.203 34.7069 li101.696 35.0668 li102.082 34.537 li102.891 38.3201 li107.629 37.8537 li108.671 36.4243 li108.216 36.0914 licp105.915 39.2458 mo105.241 40.17 li100.5 36.7057 li101.174 35.7815 li100.682 35.4216 li98.6503 38.2064 li99.1428 38.5663 li99.8169 37.6421 li104.558 41.1065 li103.884 42.0306 li104.34 42.3636 li106.371 39.5788 li105.915 39.2458 licp111.391 34.0059 mo112.734 32.631 112.659 30.2189 111.226 28.8265 cv109.815 27.4552 107.408 27.4544 106.065 28.8293 cv104.701 30.226 104.754 32.6169 106.176 33.9987 cv107.62 35.4018 110.027 35.4026 111.391 34.0059 cvcp106.363 26.0353 mo106.057 25.7376 105.571 25.7332 105.273 26.0387 cv104.974 26.3443 104.992 26.8288 105.298 27.1265 cv105.593 27.4134 106.079 27.4179 106.377 27.1124 cv106.676 26.8068 106.659 26.3223 106.363 26.0353 cvcp104.339 28.1085 mo104.033 27.8109 103.547 27.8064 103.248 28.112 cv102.95 28.4175 102.967 28.9021 103.273 29.1997 cv103.569 29.4867 104.055 29.4911 104.353 29.1856 cv104.651 28.8801 104.634 28.3955 104.339 28.1085 cvcp106.514 29.2867 mo107.409 28.37 109.107 28.5741 110.332 29.7646 cv111.567 30.9657 111.827 32.6429 110.921 33.5704 cv110.026 34.487 108.328 34.2614 107.092 33.0602 cv105.878 31.8804 105.619 30.2032 106.514 29.2867 cvcp116.742 28.2525 mo115.834 28.9485 li112.211 24.3278 li112.913 23.7896 li113.639 23.2328 114.389 23.3494 114.991 24.1175 cv115.566 24.8496 115.481 25.7794 114.791 26.3083 cv114.706 26.3733 114.648 26.3984 114.53 26.4699 cv114.831 26.854 li115.089 26.7137 115.196 26.6514 115.377 26.5123 cv116.503 25.6493 116.752 24.2861 115.961 23.278 cv115.18 22.2818 114.013 22.1774 112.935 23.0033 cv110.007 25.2489 li110.383 25.729 li111.291 25.033 li114.914 29.6537 li114.007 30.3497 li114.355 30.7937 li117.09 28.6966 li116.742 28.2525 licp122.659 24.2607 mo121.689 24.8664 li118.601 19.8722 li119.571 19.2665 li119.25 18.7476 li116.326 20.5728 li116.647 21.0917 li117.617 20.486 li120.705 25.4803 li119.735 26.0859 li120.032 26.5659 li122.956 24.7407 li122.659 24.2607 licp127.924 15.1231 mo128.961 14.6392 li128.709 14.0835 li125.931 15.3804 li126.183 15.9361 li127.233 15.4457 li129.034 19.4188 li123.098 16.7031 li121.316 17.5355 li121.568 18.0912 li122.535 17.6395 li122.975 17.8716 li125.236 22.8588 li124.199 23.3428 li124.432 23.8567 li127.21 22.5599 li126.977 22.0458 li125.927 22.5362 li124.069 18.4381 li130.217 21.2902 li130.632 21.0966 li127.924 15.1231 licp137.859 16.4316 mo138.978 16.1288 li138.829 15.5845 li135.487 16.4888 li135.636 17.0331 li136.755 16.7304 li137.222 18.4368 li136.783 18.6819 136.585 18.7671 136.29 18.8469 cv134.538 19.3209 132.947 18.361 132.448 16.5369 cv131.998 14.8894 132.808 13.3429 134.354 12.9247 cv134.928 12.7693 135.42 12.7781 136.175 12.9372 cv136.361 13.6139 li136.905 13.4665 li136.426 11.7159 li135.882 11.8633 li135.99 12.2605 li135.075 12.2081 134.609 12.2394 134.035 12.3947 cv131.885 12.9764 130.659 14.9672 131.219 17.012 cv131.786 19.0861 133.801 20.1523 136.024 19.5508 cv136.863 19.3237 137.449 19.0387 138.394 18.3881 cv137.859 16.4316 licp141.205 17.8925 mo141.84 18.1425 142.406 18.2327 142.98 18.1524 cv144.234 17.9769 145.053 16.9845 144.898 15.8512 cv144.765 14.8689 144.336 14.4361 142.938 13.8925 cv142.597 13.7555 142.205 13.5947 141.782 13.423 cv141.227 13.1926 141.032 13.0043 140.978 12.6114 cv140.894 11.9919 141.309 11.5334 142.019 11.4341 cv142.426 11.377 142.709 11.4145 143.341 11.6495 cv143.444 12.405 li144.003 12.3268 li143.756 10.5135 li143.197 10.5917 li143.248 10.9695 li142.777 10.7889 142.325 10.7444 141.826 10.8142 cv140.618 10.9833 139.784 11.9778 139.932 13.0658 cv140.054 13.9574 140.579 14.4229 141.998 14.9018 cv143.339 15.3611 143.8 15.6969 143.878 16.2712 cv143.958 16.8605 143.472 17.3597 142.717 17.4654 cv142.204 17.5372 141.762 17.4604 141.109 17.1822 cv141.002 16.3965 li140.443 16.4747 li140.7 18.3636 li141.259 18.2854 li141.205 17.8925 licp158.442 10.8202 mo155.382 10.6264 li155.342 11.235 li156.483 11.3074 li156.23 15.1117 li156.148 16.3444 155.267 17.1749 154.126 17.1026 cv153.015 17.0322 152.326 16.1327 152.409 14.8849 cv152.663 11.0654 li153.82 11.1386 li153.86 10.5299 li150.405 10.311 li150.365 10.9197 li151.522 10.993 li151.246 15.1321 li151.151 16.5626 152.268 17.6879 153.896 17.791 cv155.632 17.9009 156.894 16.8501 157.003 15.2066 cv157.26 11.3566 li158.401 11.4289 li158.442 10.8202 licp167.096 13.3409 mo168.207 13.6121 li168.347 13.0183 li165.369 12.2916 li165.229 12.8854 li166.355 13.1601 li165.355 17.4058 li162.332 11.5505 li160.421 11.0841 li160.281 11.6779 li161.318 11.931 li161.523 12.3892 li160.267 17.7185 li159.156 17.4474 li159.026 17.9966 li162.004 18.7233 li162.134 18.1741 li161.008 17.8993 li162.04 13.5201 li165.147 19.6158 li165.592 19.7242 li167.096 13.3409 licp171.46 21.1001 mo170.391 20.6937 li172.488 15.2093 li173.557 15.6158 li173.775 15.046 li170.553 13.8212 li170.335 14.391 li171.405 14.7975 li169.307 20.2818 li168.238 19.8754 li168.037 20.4025 li171.259 21.6272 li171.46 21.1001 licp180.819 19.1734 mo181.386 19.4723 li181.666 18.9304 li179.71 17.8984 li179.43 18.4404 li180.198 18.846 li176.334 22.1355 li176.759 17.0312 li177.609 17.4796 li177.889 16.9377 li175.272 15.557 li174.992 16.0989 li175.653 16.4476 li175.04 23.6083 li175.364 23.7791 li180.819 19.1734 licp184.325 27.5199 mo183.861 27.1985 li183.402 27.8637 li181.271 26.3866 li182.787 24.1901 li184.391 25.3023 li183.958 25.9299 li184.422 26.2513 li185.626 24.5066 li185.154 24.1977 li184.738 24.8002 li183.134 23.6881 li184.581 21.592 li186.636 23.017 li186.186 23.6696 li186.637 23.9824 li187.607 22.5766 li187.143 22.2552 li186.97 22.5062 li183.034 19.7779 li182.714 20.2424 li183.654 20.894 li180.292 25.7639 li179.352 25.1122 li179.032 25.5766 li183.519 28.6872 li184.325 27.5199 licp190.169 33.8584 mo189.856 33.5674 li189.611 33.3388 189.522 33.006 189.589 32.5472 cv189.946 30.0463 li190.806 30.5967 191.767 30.4699 192.454 29.7139 cv193.285 28.7999 193.146 27.7744 192.063 26.7664 cv189.429 24.314 li189.018 24.7654 li189.856 25.5447 li185.905 29.8888 li185.067 29.1094 li184.688 29.5269 li187.211 31.8754 li187.59 31.4579 li186.753 30.6785 li188.457 28.8055 li189.004 29.3147 li188.546 32.2432 li188.435 32.9318 188.483 33.06 188.974 33.5173 cv189.789 34.2759 li190.169 33.8584 licp190.704 26.3345 mo191.485 27.0619 li192.066 27.6022 192.06 28.243 191.486 28.8749 cv190.921 29.4954 190.195 29.5907 189.66 29.092 cv188.867 28.3542 li190.704 26.3345 licp190.902 35.1028 mo191.031 35.7756 191.258 36.3041 191.633 36.7467 cv192.45 37.7133 193.72 37.8691 194.588 37.1241 cv195.34 36.4784 195.474 35.881 195.183 34.4026 cv195.115 34.0388 195.041 33.6202 194.958 33.1684 cv194.855 32.5738 194.908 32.3066 195.209 32.0483 cv195.684 31.641 196.29 31.7438 196.753 32.2911 cv197.019 32.6056 197.138 32.8649 197.279 33.5277 cv196.701 34.0244 li197.065 34.4553 li198.454 33.2632 li198.089 32.8323 li197.8 33.0807 li197.7 32.584 197.495 32.1767 197.17 31.7924 cv196.382 30.8607 195.102 30.6932 194.269 31.4084 cv193.586 31.9946 193.477 32.6917 193.834 34.1536 cv194.165 35.5375 194.13 36.1102 193.69 36.4877 cv193.239 36.8751 192.561 36.734 192.068 36.1517 cv191.733 35.7557 191.562 35.3402 191.446 34.636 cv192.047 34.1194 li191.683 33.6885 li190.236 34.9302 li190.601 35.3611 li190.902 35.1028 licp196.445 41.8624 mo195.794 40.9223 li200.622 37.5805 li201.273 38.5205 li201.775 38.1733 li199.811 35.3406 li199.31 35.6879 li199.961 36.6279 li195.133 39.9697 li194.482 39.0297 li194.018 39.3508 li195.981 42.1835 li196.445 41.8624 licp199.62 47.3887 mo199.015 46.2421 li204.189 43.465 li205.228 45.4344 li204.475 45.8383 li204.739 46.3375 li206.298 45.5007 li206.034 45.0016 li205.765 45.1459 li203.146 40.182 li203.415 40.0378 li203.159 39.5522 li201.6 40.3888 li201.856 40.8744 li202.609 40.4705 li203.648 42.4399 li198.474 45.217 li197.869 44.0704 li197.372 44.3373 li199.123 47.6555 li199.62 47.3887 licp203.519 54.4825 mo203.318 53.9551 li202.563 54.2427 li201.641 51.8192 li204.136 50.8696 li204.829 52.6943 li204.117 52.9657 li204.317 53.4931 li206.298 52.7388 li206.084 52.2168 li205.399 52.4773 li204.706 50.6525 li207.086 49.7463 li207.975 52.0842 li207.234 52.3664 li207.429 52.8796 li209.025 52.2718 li208.825 51.7444 li208.539 51.853 li206.838 47.3766 li206.31 47.5774 li206.717 48.6466 li201.187 50.7521 li200.78 49.6829 li200.253 49.8837 li202.193 54.9872 li203.519 54.4825 licp204.303 60.7905 mo203.996 59.5311 li209.702 58.1481 li210.23 60.3113 li209.4 60.5124 li209.534 61.0606 li211.253 60.6439 li211.119 60.0957 li210.823 60.1675 li209.492 54.7151 li209.789 54.6432 li209.659 54.1098 li207.939 54.5266 li208.069 55.0599 li208.899 54.8588 li209.427 57.022 li203.721 58.405 li203.413 57.1456 li202.865 57.2785 li203.754 60.9233 li204.303 60.7905 li0 0 0 1 cmykf102.114 154.578 mo103.322 154.578 104.302 153.598 104.302 152.389 cv104.302 151.181 103.322 150.201 102.114 150.201 cv100.905 150.201 99.9246 151.181 99.9246 152.389 cv99.9246 153.598 100.905 154.578 102.114 154.578 cv0 0 0 1 cmykf73.0775 154.564 mo74.2862 154.564 75.266 153.584 75.266 152.375 cv75.266 151.167 74.2862 150.187 73.0775 150.187 cv71.8688 150.187 70.889 151.167 70.889 152.375 cv70.889 153.584 71.8688 154.564 73.0775 154.564 cv0 0 0 1 cmykf78.8093 154.564 mo80.018 154.564 80.9978 153.584 80.9978 152.375 cv80.9978 151.167 80.018 150.187 78.8093 150.187 cv77.6006 150.187 76.6208 151.167 76.6208 152.375 cv76.6208 153.584 77.6006 154.564 78.8093 154.564 cv0 0 0 1 cmykf187.916 154.578 mo189.125 154.578 190.104 153.598 190.104 152.389 cv190.104 151.181 189.125 150.201 187.916 150.201 cv186.707 150.201 185.727 151.181 185.727 152.389 cv185.727 153.598 186.707 154.578 187.916 154.578 cv0 0 0 1 cmykf243.369 154.578 mo244.577 154.578 245.557 153.598 245.557 152.389 cv245.557 151.181 244.577 150.201 243.369 150.201 cv242.16 150.201 241.18 151.181 241.18 152.389 cv241.18 153.598 242.16 154.578 243.369 154.578 cv0 0 0 1 cmykf37.2082 154.55 mo38.4168 154.55 39.3966 153.57 39.3966 152.361 cv39.3966 151.152 38.4168 150.172 37.2082 150.172 cv35.9994 150.172 35.0196 151.152 35.0196 152.361 cv35.0196 153.57 35.9994 154.55 37.2082 154.55 cv0 0 0 1 cmykf35.7934 198.832 mo35.7934 188.603 li32.6007 188.603 li32.6007 198.832 li35.7934 198.832 licp49.1405 198.925 mo49.1405 188.603 li46.2268 188.603 li46.2268 194.368 li42.4142 188.603 li39.1284 188.603 li39.1284 198.817 li42.0422 198.817 li42.0422 192.927 li46.0563 198.925 li49.1405 198.925 licp60.5133 189.331 mo59.3509 188.742 58.4055 188.355 56.3752 188.355 cv54.4999 188.355 52.0201 189.176 52.0201 191.47 cv52.0201 192.648 52.7485 193.392 54.0504 194.089 cv54.5928 194.384 56.8712 195.019 56.8712 195.872 cv56.8712 196.29 56.3442 196.492 55.8482 196.492 cv54.8718 196.492 53.8644 196.12 52.7485 195.345 cv51.5396 197.794 li52.8105 198.569 53.7404 199.111 55.9722 199.111 cv58.7155 199.111 60.1259 197.778 60.1878 195.965 cv60.2344 194.74 59.1805 193.578 57.9251 193.098 cv56.9952 192.741 55.4453 192.028 55.4453 191.532 cv55.4453 191.191 55.7552 190.897 56.3287 190.897 cv57.4911 190.897 58.4365 191.269 59.3355 191.811 cv60.5133 189.331 licp70.7548 190.866 mo70.7548 188.603 li61.7346 188.603 li61.7346 190.866 li64.6483 190.866 li64.6483 198.832 li67.8411 198.832 li67.8411 190.866 li70.7548 190.866 licp76.0739 198.832 mo76.0739 188.603 li72.8812 188.603 li72.8812 198.832 li76.0739 198.832 licp87.2295 190.866 mo87.2295 188.603 li78.2093 188.603 li78.2093 190.866 li81.123 190.866 li81.123 198.832 li84.3157 198.832 li84.3157 190.866 li87.2295 190.866 licp98.4442 194.756 mo98.4442 188.603 li95.2515 188.603 li95.2515 194.709 li95.2515 196.058 94.6625 196.631 93.7481 196.631 cv92.6787 196.631 92.1052 196.073 92.1052 194.709 cv92.1052 188.603 li88.928 188.603 li88.928 194.756 li88.928 197.98 90.7259 199.111 93.6861 199.111 cv96.6308 199.111 98.4442 197.964 98.4442 194.756 cvcp109.171 190.866 mo109.171 188.603 li100.151 188.603 li100.151 190.866 li103.064 190.866 li103.064 198.832 li106.257 198.832 li106.257 190.866 li109.171 190.866 licp118.996 198.832 mo118.996 196.569 li114.517 196.569 li114.517 194.678 li118.019 194.678 li118.019 192.571 li114.517 192.571 li114.517 190.866 li118.794 190.866 li118.794 188.603 li111.324 188.603 li111.324 198.832 li118.996 198.832 licp136.602 193.717 mo136.602 190.99 134.649 188.339 130.867 188.339 cv127.07 188.339 125.117 190.835 125.117 193.717 cv125.117 196.569 127.101 199.111 130.867 199.111 cv134.618 199.111 136.602 196.461 136.602 193.717 cvcp133.208 193.717 mo133.208 195.655 132.185 196.6 130.867 196.6 cv129.535 196.6 128.512 195.655 128.512 193.717 cv128.512 191.796 129.535 190.85 130.867 190.85 cv132.185 190.85 133.208 191.796 133.208 193.717 cvcp146.713 190.866 mo146.713 188.603 li139.134 188.603 li139.134 198.832 li142.327 198.832 li142.327 194.849 li145.923 194.849 li145.923 192.741 li142.327 192.741 li142.327 190.866 li146.713 190.866 licp161.498 190.866 mo161.498 188.603 li152.478 188.603 li152.478 190.866 li155.392 190.866 li155.392 198.832 li158.585 198.832 li158.585 190.866 li161.498 190.866 licp171.323 198.832 mo171.323 196.569 li166.844 196.569 li166.844 194.678 li170.347 194.678 li170.347 192.571 li166.844 192.571 li166.844 190.866 li171.122 190.866 li171.122 188.603 li163.651 188.603 li163.651 198.832 li171.323 198.832 licp182.384 189.455 mo181.237 188.711 180.308 188.339 178.804 188.339 cv174.48 188.339 173.07 191.269 173.07 193.671 cv173.07 196.073 174.387 199.111 178.804 199.111 cv180.416 199.111 181.144 198.832 182.183 198.367 cv181.485 196.073 li180.617 196.554 180.091 196.6 179.223 196.6 cv177.564 196.6 176.464 195.19 176.464 193.64 cv176.464 192.059 177.518 190.85 178.913 190.85 cv180.06 190.85 180.4 191.005 181.222 191.703 cv182.384 189.455 licp195.014 198.832 mo195.014 188.603 li191.821 188.603 li191.821 192.4 li187.807 192.4 li187.807 188.603 li184.614 188.603 li184.614 198.832 li187.807 198.832 li187.807 194.756 li191.821 194.756 li191.821 198.832 li195.014 198.832 licp208.39 198.925 mo208.39 188.603 li205.477 188.603 li205.477 194.368 li201.664 188.603 li198.378 188.603 li198.378 198.817 li201.292 198.817 li201.292 192.927 li205.306 198.925 li208.39 198.925 licp221.846 193.717 mo221.846 190.99 219.893 188.339 216.111 188.339 cv212.314 188.339 210.361 190.835 210.361 193.717 cv210.361 196.569 212.345 199.111 216.111 199.111 cv219.862 199.111 221.846 196.461 221.846 193.717 cvcp218.452 193.717 mo218.452 195.655 217.429 196.6 216.111 196.6 cv214.779 196.6 213.756 195.655 213.756 193.717 cv213.756 191.796 214.779 190.85 216.111 190.85 cv217.429 190.85 218.452 191.796 218.452 193.717 cvcp230.826 198.832 mo230.826 196.569 li226.951 196.569 li226.951 188.603 li223.758 188.603 li223.758 198.832 li230.826 198.832 licp242.831 193.717 mo242.831 190.99 240.878 188.339 237.096 188.339 cv233.299 188.339 231.346 190.835 231.346 193.717 cv231.346 196.569 233.33 199.111 237.096 199.111 cv240.847 199.111 242.831 196.461 242.831 193.717 cvcp239.436 193.717 mo239.436 195.655 238.414 196.6 237.096 196.6 cv235.763 196.6 234.74 195.655 234.74 193.717 cv234.74 191.796 235.763 190.85 237.096 190.85 cv238.414 190.85 239.436 191.796 239.436 193.717 cvcp254.262 198.445 mo254.262 193.857 li251.069 193.857 li251.069 196.616 li250.775 196.678 250.605 196.693 250.357 196.693 cv248.683 196.693 247.675 195.67 247.675 193.779 cv247.675 191.966 248.76 190.866 250.527 190.866 cv251.674 190.866 252.185 191.098 253.038 191.718 cv254.2 189.455 li252.898 188.742 252.03 188.355 249.969 188.355 cv245.552 188.355 244.281 191.346 244.281 193.857 cv244.281 196.864 246.497 199.111 250.186 199.111 cv251.689 199.111 253.239 198.832 254.262 198.445 cvcp266.193 188.603 mo262.721 188.603 li261.032 191.842 li259.42 188.603 li255.979 188.603 li259.327 194.446 li259.327 198.832 li262.52 198.832 li262.52 194.461 li266.193 188.603 li0 0 0 1 cmykf% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailerAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.14 0)%%+ procset Adobe_CoolType_Core (2.18 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EOF