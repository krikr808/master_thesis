%!PS-Adobe-3.1 EPSF-3.0%%Title: (st\214ende svv)%%Creator: Adobe InDesign 2.0.2%%For: peterkarlsson%%CreationDate: tisdag 5 oktober 2004  13.29.54%%BoundingBox: 0 0 300 216%%HiResBoundingBox: 0 0 300 216%%CropBox: 0 0 300 216%%LanguageLevel: 2%%DocumentNeededResources: (atend)%%DocumentSuppliedResources: (atend)%%DocumentNeededFeatures: (atend)%%DocumentSuppliedFeatures: (atend)%%DocumentData: Binary%%Pages: (atend)%%DocumentProcessColors: (atend)%%DocumentCustomColors: (atend)%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 62 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 206 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin		/dictstackcount countdictstack def		/showpage {} def	mark} def/graphic_cleanup{	cleartomark		dictstackcount 1 countdictstack 1 sub {end}for		end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.18 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.18 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined{/Adobe_CoolType_Core userdict/Adobe_CoolType_Coreget def}if userdict/Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.18 def/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2? not{/currentglobal falsedef/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict def}if currentpacking truesetpacking/@_SaveStackLevels{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array putput get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1index exch 0 exch putinterval 1 index exch/args exch put}{pop}ifelse}ifelsebegin count 2 sub 1 index lt{pop count 1 sub}if dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch getinterval astore pop}{pop}ifelsecount 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add defcountdictstack 1 sub @dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel @dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def currentglobal truesetglobal/CTHasResourceForAllBug Level2?{1 dict dup begin mark{(*){pop stop}128 string/Category resourceforall}stopped cleartomark currentdict eq dup{end}if not}{false}ifelse def/CTHasResourceStatusBug Level2?{mark{/steveamerige/Category resourcestatus}stopped{cleartomark true}{cleartomark currentglobalnot}ifelse}{false}ifelse def setglobal/CTResourceStatus{mark 3 1 roll/Categoryfindresource begin({ResourceStatus} stopped)0()/SubFileDecode filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse end}bind def/CTWorkAroundBugs{Level2?{/cid_PreLoad/ProcSet resourcestatus{pop popcurrentglobal mark{(*){dup/CMap CTHasResourceStatusBug{CTResourceStatus}{resourcestatus}ifelse{pop dup 0 eq exch 1 eq or{dup/CMap findresource gchecksetglobal/CMap undefineresource}{pop CTHasResourceForAllBug{exit}{stop}ifelse}ifelse}{pop}ifelse}128 string/CMap resourceforall}stopped{cleartomark}stoppedpop setglobal}if}if}bind def/doc_setup{Adobe_CoolType_Core beginCTWorkAroundBugs/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 10 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def/InVMFontsByCMap 10 dict def/InVMDeepCopiedFonts 10 dictdef end put}bind def/doc_trailer{currentdict Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}binddef/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfontsystemdict begin userdict begin/globaldict where{/globaldict get begin}if dupwhere pop exch get/globaldict where{pop end}if end endAdobe_CoolType_Core_Defined{/systemfindfont exch def}{/findfont 1 index def/systemfindfont exch def}ifelse/undefinefont{pop}ndf/copyfont{currentglobal 31 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 indexlength add 1 add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dupnull eq{pop}{{def}forall}ifelse currentdict end exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup length array copy exchsetglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 indexknown{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory 3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1 roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1 index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def currentdict end definefontpop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies known{exch $Strategies exch 2copy known{get 2 copy maxlength exch maxlength add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get exec}if end/$Strategy exchdef}{pop pop pop}ifelse}{pop pop}ifelse end}bind def/scff{$SubstituteFontbegin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def/$inVMIndex $sname null eq{1 index $str cvs dup length $slensub $slen getinterval cvn}{$sname}ifelse def end{findfont}@Stopped{dup length8 add string exch 1 index 0(BadFont:)putinterval 1 index exch 8 exch duplength string cvs putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if$SubstituteFont begin/$sname null def/$slen 0 def/$inVMIndex null def end}binddef/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$inVMIndex null def/$doSmartSub true def/$depth 0def/$fontname null def/$italicangle 26.5 def/$dstack null def/$Strategies 10dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dictbegin/UseFont exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup0 1 255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dupbegin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch Adobe_CoolType_Data/InVMDeepCopiedFonts get 1 index/FontName get known{pop Adobe_CoolType_Data/InVMDeepCopiedFonts get 1 indexget null copyfont}{$deepcopyfont}ifelse exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefontAdobe_CoolType_Data/InVMDeepCopiedFonts get begin dup/FontBasedOn get 1 indexdef end}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0 setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120sub x 10 div exch moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlinetoclosepath gsave Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal exch dup gcheck setglobal null copyfont begin/FontBasedOncurrentdict/FontName known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName $fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup sin exch cos div 1 0 0]matrixconcatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict enddefinefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique SetSubstituteStrategy/$findfontByEnum{duptype/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs duplength $slen sub $slen getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def $SubstituteFont/$dstackcountdictstack array dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdicttrue $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{beginfalse}ifelse}forall pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dupbegin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict dup/FontName/copied put copyfontbegin/FDepVector FDepVector copyarray 0 1 2 index length 1 sub{2 copy get$deepcopyfont dup/FontName/copied put/copied exch definefont 3 copy put poppop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}binddef/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index$cmapname $fontpat cvs putinterval $cmapname length add $str exch 0 exchgetinterval cvn}bind def/$findfontByROS{/$fontname exch def $ROS Registry 2copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelsefalse exch{dup/CIDFont resourcestatus{pop pop save 1 index/CIDFontfindresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch popexch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs$buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnlyknown{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get dup/Registryget Registry eq exch/Ordering get Ordering eq and and{exch restore exch poptrue exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end currentdict/$errorknown currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Categoryresourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def duplength $slen gt $sname null ne or $slen 0 gt and{$sname null eq{dup $str cvsdup length $slen sub $slen getinterval cvn}{$sname}ifelse Adobe_CoolType_Data/InVMFontsByCMap get 1 index 2 copy known{get false exch{pop currentglobal{GlobalFontDirectory 1 index known{exch pop true exit}{pop}ifelse}{FontDirectory 1 index known{exch pop true exit}{GlobalFontDirectory 1 indexknown{exch pop true exit}{pop}ifelse}ifelse}ifelse}forall}{pop pop false}ifelse{exch pop exch pop}{dup/CMap resourcestatus{pop pop dup/$cmapname exchdef/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 stringcvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop poppop $findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 indexsub exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll addgetinterval exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1 roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for duptype/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop$findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$findfontByEnum}{//SubstituteFont exec}ifelse end}}ifelse bind readonlydef Adobe_CoolType_Core/scfindfont/systemfindfont load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName getdup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound true def}if exch pop{$slen 0 gt$sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfontdup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forallcurrentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse$origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core_Defined not{Adobe_CoolType_Core/findfont{$SubstituteFontbegin $depth 0 eq{/$fontname 1 index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont$SubstituteFont begin/$depth $depth 1 sub def $substituteFound $depth 0 eq and{$inVMIndex null ne{dup $inVMIndex $AddInVMFont}if $doSmartSub{currentdict/$Strategy known{$Strategy/$BuildFont get exec}if}if}if end}bind put}if}if end/$AddInVMFont{exch/FontName 2 copy known{get 1 dict dup begin exch 1 indexgcheck def end exch Adobe_CoolType_Data/InVMFontsByCMap get exch $DictAdd}{poppop pop}ifelse}bind def/$DictAdd{2 copy known not{2 copy 4 index length dictput}if Level2? not{2 copy get dup maxlength exch length 4 index length add lt2 copy get dup length 4 index length add exch maxlength 1 index lt{2 mul dictbegin 2 copy get{forall}def 2 copy currentdict put end}{pop}ifelse}if getbegin{def}forall end}bind def end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.14 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.14 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_BadResourceImplementation? ct_Level2?{savecurrentglobal true setglobal/Generic/Category findresource dup length dictcopy dup/InstanceType/dicttype put/egiremaevets exch/Category defineresourcepop setglobal/foo 1 dict dup/s 3 put/egiremaevets defineresource pop restoremark{/bar 1 dict dup/a 7 put/egiremaevets defineresource}stopped{cleartomarktrue}{cleartomark false}ifelse currentglobal true setglobal/egiremaevets/Category undefineresource setglobal}{false}ifelse def/ct_UseNativeCapability?systemdict/composefont known def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2string def/dst_string 1500 string def/nullstring()def/usewidths? true def enddef ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel known{pop/CIDFont findresource/GlyphDirectory get}{1index/CIDFont findresource/GlyphDirectory get dup type/dicttype eq{dup dupmaxlength exch length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3dict begin/vm exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm setglobal/gvm currentglobal def $ gcheck setglobal}if?{$ begin}if}def/?{$ type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data beginbegin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256mod put stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3 1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevelknown{gvm setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001 0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch errordict exch get exec stop}bind def/ct_reraise{cvx$error/errorname get(Error: )print dup(                    )cvs printerrordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1roll{2 index exch get exch 8 bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dupdst_string length gt{dup string/dst_string exch def}if 1 index ct_CID_STR_SIZEidiv/arrayIndex exch def 2 index arrayIndex get 2 index arrayIndexct_CID_STR_SIZE mul sub{dup 3 index add 2 index length le{2 index getintervaldst_string dst_index 2 index putinterval length dst_index add/dst_index exchdef exit}{1 index length 1 index sub dup 4 1 roll getinterval dst_stringdst_index 2 index putinterval pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2 index dup length arrayIndex gt{arrayIndexget}{pop exit}ifelse 0}ifelse}loop pop pop pop dst_string 0 dst_indexgetinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark truesetglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomarksetglobal true}{cleartomark currentglobal not exch setglobal}ifelse{{mark 3 1roll/Category findresource begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobalend}}{{resourcestatus}}ifelse bind def ct_BadResourceImplementation?{currentglobal true setglobal/CIDFont/Category undefineresource setglobal}if/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 70 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				has_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict/Width get def			/Height DataDict/Height get def			/ImageMatrix DataDict/ImageMatrix get def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [1 0] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/has_mask{	dup type /dicttype eq	{		dup /Mask known	{dup /Mask get}{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin		dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf		begin	gsave		0 1 translate 1 -1 Height div scale		1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse				<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [1 0]		>>		imagemask				grestore				0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					has_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						image					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								has_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			has_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def		/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def		{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: 4 1%%EndPageComments%%BeginPageSetupAdobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -216 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark% page clipgsavenewpathgsave % PSGState0 0 mo0 216 li300 216 li300 0 liclp[1 0 0 1 0 0 ] concat32.7077 176.136 mo32.7077 172.598 li25.1419 172.598 li25.1419 153.018 li20.9387 153.018 li20.9387 176.136 li32.7077 176.136 licp38.1925 176.136 mo38.1925 159.918 li34.2345 159.918 li34.2345 176.136 li38.1925 176.136 licp53.422 176.136 mo53.422 164.157 li53.422 161.144 52.4062 159.533 49.534 159.533 cv47.8176 159.533 46.6618 160.514 45.2957 162.09 cv45.2957 159.848 li41.2677 159.848 li41.2677 176.136 li45.2957 176.136 li45.2957 165.558 li45.5759 165.067 li46.907 162.896 47.9928 162.791 48.238 162.791 cv48.3431 162.791 48.4481 162.791 48.5182 162.826 cv49.3588 163.001 49.3939 164.332 49.3939 164.927 cv49.3939 176.136 li53.422 176.136 licp67.9331 176.136 mo63.5198 167.379 li67.8631 159.883 li63.835 159.883 li60.3674 166.188 li60.3674 150.601 li56.3743 150.601 li56.3743 176.136 li60.3674 176.136 li60.3674 168.71 li63.8 176.136 li67.9331 176.136 licp81.9785 168.01 mo81.9785 163.211 79.2814 159.428 75.0432 159.428 cv70.805 159.428 68.1079 163.211 68.1079 168.01 cv68.1079 172.843 70.805 176.591 75.0432 176.591 cv79.2814 176.591 81.9785 172.843 81.9785 168.01 cvcp90.3495 176.591 mo88.9134 176.591 88.2478 176.276 87.8976 176.066 cv87.8976 184.297 li83.8695 184.297 li83.8695 159.848 li87.8976 159.848 li87.8976 161.88 li88.458 160.829 89.6139 159.393 91.6455 159.393 cv94.973 159.393 97.0746 162.861 97.0746 167.519 cv97.0746 172.598 94.4126 176.591 90.3495 176.591 cvcp103.124 176.136 mo103.124 159.918 li99.1655 159.918 li99.1655 176.136 li103.124 176.136 licp118.353 176.136 mo118.353 164.157 li118.353 161.144 117.338 159.533 114.465 159.533 cv112.749 159.533 111.593 160.514 110.227 162.09 cv110.227 159.848 li106.199 159.848 li106.199 176.136 li110.227 176.136 li110.227 165.558 li110.507 165.067 li111.838 162.896 112.924 162.791 113.169 162.791 cv113.274 162.791 113.38 162.791 113.45 162.826 cv114.29 163.001 114.325 164.332 114.325 164.927 cv114.325 176.136 li118.353 176.136 licp134.353 162.755 mo134.353 159.813 li131.236 160.058 li129.695 160.058 li128.434 159.533 127.663 159.393 126.682 159.393 cv122.724 159.393 120.728 162.44 120.728 165.628 cv120.728 167.169 121.113 168.465 121.849 169.586 cv122.164 170.041 122.549 170.496 123.425 171.092 cv123.075 171.337 122.794 171.547 122.479 171.757 cv121.638 172.353 120.518 173.264 120.518 174.419 cv120.518 175.33 121.008 175.926 122.409 176.591 cv120.798 178.307 120.237 179.358 120.237 180.584 cv120.237 182.931 122.234 184.647 125.982 184.647 cv130.886 184.647 133.863 181.6 133.863 177.642 cv133.863 175.12 132.847 173.859 129.765 173.859 cv125.141 173.859 li124.861 173.859 124.686 173.824 124.616 173.684 cv124.546 173.579 124.581 173.404 124.581 173.264 cv124.581 172.808 125.001 172.283 125.807 171.547 cv126.052 171.547 126.297 171.582 126.542 171.582 cv130.5 171.582 132.602 169.025 132.602 165.382 cv132.602 164.367 132.427 163.701 131.866 162.755 cv134.353 162.755 licp146.377 160.969 mo144.801 159.848 142.98 159.288 141.018 159.288 cv137.305 159.288 135.379 161.46 135.379 164.402 cv135.379 166.538 136.5 167.694 138.706 168.955 cv139.442 169.341 140.353 169.691 141.053 170.146 cv141.789 170.602 142.349 171.162 142.349 172.003 cv142.349 172.948 141.509 173.579 140.248 173.579 cv139.302 173.579 138.601 173.334 137.971 172.983 cv137.34 172.633 136.815 172.178 136.255 171.722 cv134.959 174.77 li136.745 175.891 138.496 176.591 140.633 176.591 cv144.311 176.591 146.202 174.279 146.202 172.003 cv146.202 169.376 145.607 168.5 143.365 167.169 cv142.559 166.679 141.544 166.293 140.738 165.803 cv139.932 165.312 139.267 164.717 139.267 163.911 cv139.267 162.931 140.178 162.3 141.439 162.3 cv142.664 162.3 143.61 162.826 144.486 163.561 cv144.696 163.701 144.871 163.876 145.046 164.016 cv146.377 160.969 licp166.693 176.136 mo166.693 159.848 li162.664 159.848 li162.664 170.426 li162.174 171.127 li160.948 172.983 159.967 173.194 159.687 173.194 cv159.652 173.194 159.617 173.194 159.582 173.194 cv158.636 173.123 158.566 171.722 158.566 171.057 cv158.566 159.848 li154.538 159.848 li154.538 171.827 li154.538 174.84 155.554 176.416 158.426 176.416 cv160.143 176.416 161.298 175.47 162.664 173.894 cv162.664 176.136 li166.693 176.136 licp181.967 176.136 mo181.967 164.157 li181.967 161.144 180.952 159.533 178.079 159.533 cv176.363 159.533 175.207 160.514 173.841 162.09 cv173.841 159.848 li169.813 159.848 li169.813 176.136 li173.841 176.136 li173.841 165.558 li174.121 165.067 li175.452 162.896 176.538 162.791 176.783 162.791 cv176.888 162.791 176.994 162.791 177.064 162.826 cv177.904 163.001 177.939 164.332 177.939 164.927 cv177.939 176.136 li181.967 176.136 licp188.878 176.136 mo188.878 159.918 li184.92 159.918 li184.92 176.136 li188.878 176.136 licp203.624 159.848 mo199.701 159.848 li197.389 169.27 li197.249 169.761 197.004 171.372 197.004 171.372 cv197.004 171.372 196.758 169.726 196.653 169.27 cv194.412 159.848 li190.349 159.848 li194.902 176.136 li198.58 176.136 li203.624 159.848 licp216.282 168.5 mo216.282 166.854 li216.282 162.475 214.18 159.393 210.467 159.393 cv205.809 159.393 203.532 162.755 203.532 168.43 cv203.532 173.334 206.334 176.591 210.222 176.591 cv212.709 176.591 214.32 176.136 216.212 175.015 cv214.986 172.143 li213.585 172.913 212.324 173.299 210.643 173.299 cv208.716 173.299 207.735 171.162 207.63 169.586 cv207.595 169.306 207.595 168.99 207.595 168.5 cv216.282 168.5 licp225.949 164.822 mo225.529 164.472 225.108 164.262 224.583 164.262 cv223.042 164.262 222.341 166.293 222.341 168.675 cv222.341 176.136 li218.348 176.136 li218.348 159.848 li221.886 159.848 li222.026 163.141 li222.586 161.144 223.707 159.603 224.828 159.603 cv225.529 159.603 226.439 159.953 227 160.724 cv225.949 164.822 licp237.192 164.016 mo237.017 163.876 236.842 163.701 236.632 163.561 cv235.756 162.826 234.811 162.3 233.585 162.3 cv232.324 162.3 231.413 162.931 231.413 163.911 cv231.413 164.717 232.078 165.312 232.884 165.803 cv233.69 166.293 234.705 166.679 235.511 167.169 cv237.753 168.5 238.348 169.376 238.348 172.003 cv238.348 174.279 236.457 176.591 232.779 176.591 cv230.642 176.591 228.891 175.891 227.105 174.77 cv228.401 171.722 li228.961 172.178 229.486 172.633 230.117 172.983 cv230.747 173.334 231.448 173.579 232.394 173.579 cv233.655 173.579 234.495 172.948 234.495 172.003 cv234.495 171.162 233.935 170.602 233.199 170.146 cv232.499 169.691 231.588 169.341 230.852 168.955 cv228.646 167.694 227.525 166.538 227.525 164.402 cv227.525 161.46 229.451 159.288 233.164 159.288 cv235.126 159.288 236.947 159.848 238.523 160.969 cv237.192 164.016 licp240.45 176.136 mo240.45 159.918 li244.408 159.918 li244.408 176.136 li240.45 176.136 licp254.765 175.33 mo253.714 176.066 252.663 176.591 251.297 176.591 cv249.055 176.591 248.495 175.435 248.495 173.088 cv248.495 162.861 li246.534 162.861 li246.534 160.304 li248.495 159.883 li248.495 154.98 li252.208 154.98 li252.208 159.848 li255.08 159.848 li255.08 162.861 li252.208 162.861 li252.208 170.181 li252.208 171.897 252.278 172.808 252.943 172.808 cv253.679 172.808 254.169 172.213 254.73 171.862 cv255.746 174.56 li255.43 174.84 255.115 175.085 254.765 175.33 cvcp260.299 168.5 mo260.299 168.99 260.299 169.306 260.334 169.586 cv260.439 171.162 261.42 173.299 263.346 173.299 cv265.028 173.299 266.288 172.913 267.69 172.143 cv268.915 175.015 li267.024 176.136 265.413 176.591 262.926 176.591 cv259.038 176.591 256.236 173.334 256.236 168.43 cv256.236 162.755 258.513 159.393 263.171 159.393 cv266.884 159.393 268.986 162.475 268.986 166.854 cv268.986 168.5 li260.299 168.5 licp279.283 174.56 mo278.267 171.862 li277.707 172.213 277.217 172.808 276.481 172.808 cv275.816 172.808 275.746 171.897 275.746 170.181 cv275.746 162.861 li278.618 162.861 li278.618 159.848 li275.746 159.848 li275.746 154.98 li272.033 154.98 li272.033 159.883 li270.071 160.304 li270.071 162.861 li272.033 162.861 li272.033 173.088 li272.033 175.435 272.593 176.591 274.835 176.591 cv276.201 176.591 277.252 176.066 278.302 175.33 cv278.653 175.085 278.968 174.84 279.283 174.56 cvcp77.8453 168.01 mo77.8453 171.652 76.2692 173.509 75.0432 173.509 cv73.8173 173.509 72.2761 171.757 72.2761 168.01 cv72.2761 164.577 73.8173 162.51 75.0432 162.51 cv76.2692 162.51 77.8453 164.577 77.8453 168.01 cvcp90.4895 162.72 mo89.4738 162.72 88.2829 164.367 87.8976 165.312 cv87.8976 170.777 li87.8976 172.073 88.458 173.439 89.9992 173.439 cv91.4353 173.439 92.9064 171.267 92.9064 167.764 cv92.9064 164.752 91.8206 162.72 90.4895 162.72 cvcp128.539 165.488 mo128.539 168.22 127.418 168.815 126.682 168.815 cv125.947 168.815 124.826 168.255 124.826 165.523 cv124.826 162.861 125.947 162.16 126.647 162.16 cv127.383 162.16 128.539 162.826 128.539 165.488 cvcp130.255 178.307 mo130.255 180.059 128.329 181.635 126.472 181.635 cv124.966 181.635 123.67 180.724 123.67 179.568 cv123.67 178.693 124.09 177.887 124.581 177.011 cv128.924 177.011 li130.08 177.011 130.255 177.677 130.255 178.307 cvcp212.254 166.118 mo207.77 166.118 li207.84 163.631 208.786 162.3 210.222 162.3 cv211.343 162.3 212.149 163.491 212.254 166.118 cvcp262.926 162.3 mo261.49 162.3 260.544 163.631 260.474 166.118 cv264.957 166.118 li264.852 163.491 264.047 162.3 262.926 162.3 cvfalse sop0 0 0 1 cmykf127.518 33.084 mo127.518 60.4949 li148.67 72.6712 li148.67 57.632 li142.023 53.7511 li142.023 33.084 li127.518 33.084 li0 0 0 1 cmykf157.074 33.0833 mo157.074 53.7511 li150.426 57.632 li150.426 72.6712 li171.434 60.4458 li171.434 33.0833 li157.074 33.0833 li0 0 0 1 cmykf151.304 74.2002 mo172.458 61.8783 li195.985 75.5111 li188.758 88.0277 li171.1 77.791 li164.453 81.7217 li151.304 74.2002 li0 0 0 1 cmykf150.426 75.7082 mo150.426 100.291 li174.005 113.972 li181.254 101.351 li163.429 90.9895 li163.429 83.0821 li150.426 75.7082 li0 0 0 1 cmykf148.665 75.7082 mo148.665 100.311 li125.302 113.965 li118.004 101.234 li135.76 90.8996 li135.76 83.1866 li148.665 75.7082 li0 0 0 1 cmykf126.672 61.9437 mo147.775 74.2176 li134.87 81.7858 li127.982 77.8076 li110.274 88.1406 li102.998 75.6727 li126.672 61.9437 li0 0 0 1 cmykf204.328 73.8165 mo207.375 75.6554 li210.421 73.8165 li207.375 71.9776 li204.328 73.8165 licp0 0 0 1 cmyk0.5 lw0 lc0 lj4 ml[] 0 dshtrue sadjgsave[1.02707 -1.02707 1.02707 1.02707 386.619 566.78 ] concatsgrestore newpath88.1231 73.8165 mo91.1694 75.6554 li94.2156 73.8165 li91.1694 71.9776 li88.1231 73.8165 licp0 0 0 1 cmykgsave[1.02707 -1.02707 1.02707 1.02707 270.415 566.78 ] concatsgrestore newpath91.777 91.2402 mo91.6469 90.7068 li90.7405 90.9169 li90.1331 88.4278 li95.8089 87.1119 li96.08 88.2231 li96.6744 88.0853 li95.8573 84.7368 li95.263 84.8746 li95.5341 85.9859 li89.8138 87.312 li89.5426 86.2008 li88.9929 86.3282 li90.2764 91.5881 li91.777 91.2402 licp92.5297 96.5166 mo92.1497 95.4378 li97.6937 93.5033 li98.0737 94.5822 li98.6497 94.3812 li97.5046 91.1302 li96.9286 91.3312 li97.3086 92.41 li91.7646 94.3445 li91.3846 93.2656 li90.8518 93.4515 li91.9969 96.7026 li92.5297 96.5166 licp101.729 102.41 mo102.238 103.434 li102.783 103.159 li101.419 100.414 li100.874 100.689 li101.39 101.727 li97.4963 103.694 li100.027 97.6139 li99.1514 95.852 li98.6069 96.1271 li99.082 97.0832 li98.8638 97.5351 li93.9767 100.004 li93.4677 98.9795 li92.964 99.234 li94.3282 101.98 li94.8319 101.725 li94.3161 100.687 li98.3319 98.6581 li95.6717 104.957 li95.8754 105.367 li101.729 102.41 licp102.546 113.794 mo102.087 113.166 li103.033 108.898 li106.504 109.258 li107.062 110.022 li107.557 109.666 li106.029 107.571 li105.534 107.927 li105.92 108.457 li102.061 108.057 li101.045 112.694 li102.087 114.123 li102.546 113.794 licp100.245 110.64 mo99.5704 109.716 li104.339 106.288 li105.013 107.212 li105.508 106.856 li103.477 104.071 li102.982 104.427 li103.656 105.352 li98.8874 108.779 li98.2134 107.855 li97.7552 108.184 li99.7862 110.969 li100.245 110.64 licp105.197 117.68 mo106.539 119.055 108.964 119.05 110.404 117.665 cv111.822 116.301 111.892 113.906 110.55 112.531 cv109.186 111.134 106.783 111.118 105.354 112.493 cv103.903 113.888 103.833 116.283 105.197 117.68 cvcp113.348 112.908 mo113.656 112.612 113.674 112.129 113.376 111.823 cv113.077 111.518 112.59 111.521 112.282 111.817 cv111.986 112.102 111.967 112.586 112.266 112.891 cv112.564 113.197 113.051 113.193 113.348 112.908 cvcp111.323 110.835 mo111.631 110.539 111.65 110.055 111.351 109.75 cv111.053 109.444 110.566 109.448 110.258 109.744 cv109.961 110.029 109.943 110.512 110.241 110.818 cv110.539 111.123 111.027 111.12 111.323 110.835 cvcp110.077 112.964 mo110.972 113.881 110.719 115.564 109.488 116.748 cv108.245 117.943 106.553 118.152 105.648 117.225 cv104.753 116.308 105.028 114.626 106.27 113.431 cv107.49 112.257 109.182 112.048 110.077 112.964 cvcp112.283 122.993 mo111.392 122.275 li115.029 117.665 li115.718 118.22 li116.43 118.794 116.494 119.55 115.89 120.317 cv115.313 121.047 114.389 121.184 113.712 120.639 cv113.629 120.572 113.591 120.522 113.494 120.424 cv113.191 120.807 li113.389 121.024 113.474 121.113 113.653 121.256 cv114.757 122.146 116.141 122.066 116.935 121.06 cv117.719 120.066 117.545 118.908 116.488 118.057 cv113.613 115.742 li113.235 116.221 li114.126 116.938 li110.489 121.548 li109.598 120.831 li109.249 121.274 li111.933 123.436 li112.283 122.993 licp118.776 127.37 mo117.806 126.764 li120.902 121.776 li121.872 122.381 li122.194 121.863 li119.27 120.038 li118.948 120.556 li119.919 121.162 li116.822 126.151 li115.852 125.545 li115.555 126.024 li118.478 127.85 li118.776 127.37 licp129.628 126.196 mo130.665 126.68 li130.916 126.124 li128.139 124.827 li127.887 125.383 li128.937 125.873 li127.138 129.847 li125.306 123.504 li123.523 122.672 li123.272 123.228 li124.239 123.679 li124.352 124.17 li122.093 129.158 li121.056 128.674 li120.824 129.188 li123.601 130.485 li123.834 129.971 li122.784 129.48 li124.64 125.382 li126.508 131.977 li126.923 132.17 li129.628 126.196 licp136.688 132.503 mo137.807 132.806 li137.952 132.261 li134.61 131.357 li134.465 131.902 li135.584 132.205 li135.128 133.914 li134.626 133.905 134.412 133.878 134.117 133.799 cv132.365 133.324 131.475 131.693 131.962 129.866 cv132.402 128.215 133.88 127.288 135.426 127.706 cv136 127.862 136.421 128.118 136.993 128.636 cv136.812 129.314 li137.357 129.461 li137.825 127.708 li137.28 127.56 li137.174 127.958 li136.409 127.451 135.991 127.243 135.417 127.088 cv133.268 126.506 131.206 127.607 130.66 129.656 cv130.106 131.734 131.31 133.671 133.533 134.272 cv134.372 134.5 135.022 134.549 136.166 134.463 cv136.688 132.503 licp140.21 135.171 mo140.76 135.571 141.285 135.8 141.86 135.866 cv143.118 136.01 144.165 135.254 144.307 134.119 cv144.429 133.136 144.126 132.61 142.914 131.734 cv142.618 131.516 142.281 131.263 141.915 130.991 cv141.438 130.629 141.297 130.398 141.346 130.005 cv141.424 129.384 141.943 129.044 142.655 129.126 cv143.064 129.173 143.327 129.279 143.878 129.665 cv143.784 130.422 li144.345 130.486 li144.571 128.67 li144.011 128.605 li143.963 128.984 li143.554 128.691 143.128 128.535 142.628 128.478 cv141.416 128.339 140.354 129.093 140.218 130.183 cv140.106 131.076 140.495 131.657 141.745 132.476 cv142.924 133.255 143.284 133.695 143.212 134.271 cv143.138 134.861 142.54 135.222 141.782 135.136 cv141.267 135.077 140.86 134.892 140.299 134.459 cv140.397 133.672 li139.837 133.608 li139.601 135.5 li140.161 135.564 li140.21 135.171 licp157.795 128.637 mo154.735 128.83 li154.782 129.439 li155.924 129.366 li156.216 133.168 li156.31 134.4 155.556 135.334 154.415 135.407 cv153.304 135.477 152.492 134.673 152.397 133.426 cv152.103 129.609 li153.26 129.535 li153.213 128.927 li149.758 129.146 li149.805 129.754 li150.962 129.681 li151.28 133.817 li151.389 135.247 152.657 136.221 154.286 136.118 cv156.021 136.008 157.122 134.807 156.996 133.165 cv156.7 129.317 li157.842 129.245 li157.795 128.637 licp165.425 127.361 mo166.536 127.09 li166.392 126.497 li163.414 127.223 li163.558 127.816 li164.684 127.541 li165.709 131.781 li160.377 127.964 li158.466 128.431 li158.609 129.024 li159.646 128.771 li160.036 129.084 li161.323 134.405 li160.211 134.677 li160.344 135.225 li163.322 134.498 li163.19 133.95 li162.063 134.225 li161.006 129.852 li166.522 133.843 li166.966 133.735 li165.425 127.361 licp172.726 130.893 mo171.657 131.3 li169.559 125.815 li170.629 125.409 li170.411 124.839 li167.189 126.064 li167.407 126.634 li168.476 126.227 li170.573 131.712 li169.504 132.118 li169.706 132.645 li172.927 131.42 li172.726 130.893 licp177.045 122.21 mo177.611 121.911 li177.333 121.368 li175.377 122.4 li175.655 122.943 li176.424 122.538 li176.872 127.63 li172.984 124.352 li173.834 123.904 li173.556 123.361 li170.939 124.742 li171.217 125.285 li171.878 124.936 li177.323 129.547 li177.646 129.377 li177.045 122.21 licp185.398 122.646 mo184.934 122.968 li185.39 123.635 li183.259 125.112 li181.754 122.908 li183.358 121.796 li183.788 122.426 li184.252 122.104 li183.056 120.354 li182.601 120.688 li183.014 121.293 li181.41 122.405 li179.973 120.302 li182.028 118.877 li182.476 119.531 li182.927 119.219 li181.963 117.808 li181.5 118.13 li181.672 118.382 li177.736 121.11 li178.054 121.576 li178.994 120.924 li182.332 125.81 li181.392 126.462 li181.711 126.928 li186.198 123.817 li185.398 122.646 licp192.918 117.172 mo192.605 117.463 li192.36 117.691 192.024 117.753 191.578 117.648 cv189.144 117.08 li189.758 116.259 189.712 115.28 189.025 114.524 cv188.193 113.61 187.172 113.666 186.089 114.674 cv183.454 117.126 li183.865 117.577 li184.702 116.798 li188.654 121.141 li187.816 121.921 li188.196 122.338 li190.719 119.99 li190.339 119.572 li189.502 120.352 li187.798 118.479 li188.345 117.97 li191.192 118.674 li191.861 118.843 191.992 118.805 192.483 118.348 cv193.298 117.589 li192.918 117.172 licp185.55 116.008 mo186.332 115.281 li186.912 114.74 187.543 114.799 188.118 115.431 cv188.682 116.051 188.716 116.791 188.18 117.29 cv187.388 118.028 li185.55 116.008 licp194.8 115.45 mo195.439 115.213 195.921 114.903 196.296 114.46 cv197.113 113.494 197.061 112.209 196.19 111.467 cv195.435 110.825 194.827 110.789 193.422 111.316 cv193.076 111.442 192.677 111.583 192.247 111.738 cv191.679 111.936 191.408 111.926 191.106 111.669 cv190.63 111.264 190.633 110.646 191.096 110.099 cv191.362 109.784 191.597 109.624 192.225 109.377 cv192.806 109.871 li193.171 109.44 li191.776 108.255 li191.412 108.686 li191.703 108.933 li191.231 109.112 190.864 109.381 190.539 109.765 cv189.751 110.697 189.793 111.994 190.63 112.705 cv191.315 113.288 192.017 113.284 193.395 112.694 cv194.7 112.143 195.268 112.085 195.71 112.461 cv196.163 112.846 196.134 113.542 195.641 114.124 cv195.306 114.52 194.926 114.757 194.253 114.986 cv193.649 114.472 li193.285 114.903 li194.737 116.138 li195.102 115.707 li194.8 115.45 licp200.302 107.83 mo199.65 108.77 li194.804 105.455 li195.455 104.515 li194.952 104.171 li192.988 107.003 li193.492 107.348 li194.143 106.408 li198.99 109.723 li198.338 110.663 li198.804 110.982 li200.767 108.149 li200.302 107.83 licp203.794 101.672 mo203.189 102.818 li197.997 100.076 li199.036 98.1066 li199.791 98.5054 li200.054 98.0063 li198.49 97.1802 li198.227 97.6792 li198.496 97.8217 li195.877 102.786 li195.608 102.644 li195.352 103.129 li196.916 103.955 li197.172 103.47 li196.417 103.071 li197.456 101.102 li202.648 103.843 li202.043 104.99 li202.542 105.253 li204.293 101.935 li203.794 101.672 licp206.376 93.1824 mo206.176 93.7099 li206.934 93.9908 li206.012 96.4144 li203.51 95.4867 li204.203 93.662 li204.918 93.927 li205.119 93.3995 li203.131 92.6628 li202.945 93.1955 li203.631 93.4499 li202.938 95.2747 li200.549 94.3895 li201.438 92.0516 li202.182 92.3272 li202.377 91.814 li200.775 91.2203 li200.575 91.7478 li200.861 91.8538 li199.159 96.3301 li199.688 96.5262 li200.095 95.4571 li205.643 97.5137 li205.237 98.5828 li205.766 98.779 li207.706 93.6754 li206.376 93.1824 licp208.871 86.659 mo208.595 87.9256 li202.874 86.604 li203.347 84.4283 li204.18 84.6205 li204.3 84.0691 li202.576 83.671 li202.456 84.2223 li202.753 84.291 li201.559 89.775 li201.262 89.7063 li201.145 90.2427 li202.869 90.6409 li202.986 90.1045 li202.154 89.9122 li202.627 87.7366 li208.349 89.0582 li208.073 90.3248 li208.623 90.4519 li209.421 86.786 li208.871 86.659 li0 0 0 1 cmykf95.4513 58.5575 mo95.3211 59.0909 li96.2244 59.3138 li95.617 61.803 li89.9606 60.4073 li90.2318 59.2961 li89.6395 59.15 li88.8225 62.4985 li89.4147 62.6446 li89.6859 61.5334 li95.3866 62.94 li95.1155 64.0513 li95.6633 64.1864 li96.9468 58.9266 li95.4513 58.5575 licp97.9798 54.3828 mo97.5999 55.4617 li92.0815 53.4548 li92.4615 52.376 li91.8882 52.1675 li90.7431 55.4185 li91.3164 55.6269 li91.6964 54.5481 li97.2148 56.5549 li96.8348 57.6338 li97.3651 57.8266 li98.5102 54.5757 li97.9798 54.3828 licp96.5303 43.983 mo97.0641 42.9714 li96.5226 42.6904 li95.0921 45.4016 li95.6336 45.6826 li96.1745 44.6575 li100.046 46.6669 li93.6332 48.1668 li92.7151 49.9068 li93.2566 50.1879 li93.7548 49.2436 li94.2491 49.1565 li99.1088 51.6788 li98.575 52.6905 li99.0759 52.9504 li100.507 50.2391 li100.006 49.9792 li99.4646 51.0044 li95.4713 48.9318 li102.138 47.4088 li102.352 47.0041 li96.5303 43.983 licp107.246 38.8361 mo106.788 39.4645 li102.424 39.8834 li101.697 36.4808 li102.254 35.7168 li101.761 35.3569 li100.233 37.4516 li100.726 37.8116 li101.112 37.2817 li101.921 41.0648 li106.659 40.5984 li107.702 39.1691 li107.246 38.8361 licp104.946 41.9906 mo104.272 42.9147 li99.5303 39.4504 li100.205 38.5262 li99.7117 38.1663 li97.6807 40.9511 li98.1733 41.311 li98.8473 40.3869 li103.589 43.8512 li102.915 44.7754 li103.37 45.1083 li105.401 42.3235 li104.946 41.9906 licp110.422 36.7507 mo111.764 35.3758 111.689 32.9637 110.257 31.5712 cv108.846 30.1999 106.438 30.1991 105.096 31.574 cv103.732 32.9708 103.785 35.3616 105.206 36.7435 cv106.65 38.1465 109.058 38.1474 110.422 36.7507 cvcp105.394 28.78 mo105.087 28.4824 104.602 28.478 104.303 28.7835 cv104.005 29.089 104.022 29.5736 104.328 29.8712 cv104.623 30.1582 105.109 30.1626 105.408 29.8571 cv105.706 29.5516 105.689 29.067 105.394 28.78 cvcp103.369 30.8533 mo103.063 30.5557 102.577 30.5512 102.279 30.8567 cv101.98 31.1623 101.998 31.6468 102.304 31.9444 cv102.599 32.2314 103.085 32.2359 103.383 31.9303 cv103.682 31.6249 103.665 31.1402 103.369 30.8533 cvcp105.544 32.0314 mo106.439 31.1148 108.137 31.3188 109.362 32.5093 cv110.598 33.7105 110.857 35.3876 109.952 36.3152 cv109.057 37.2317 107.359 37.0062 106.123 35.805 cv104.909 34.6251 104.649 32.948 105.544 32.0314 cvcp115.772 30.9972 mo114.865 31.6932 li111.241 27.0726 li111.943 26.5344 li112.669 25.9775 113.419 26.0942 114.022 26.8622 cv114.596 27.5944 114.511 28.5242 113.821 29.0531 cv113.737 29.118 113.679 29.1432 113.56 29.2146 cv113.862 29.5987 li114.12 29.4584 114.226 29.3962 114.408 29.257 cv115.533 28.394 115.782 27.0309 114.991 26.0228 cv114.21 25.0266 113.043 24.9222 111.966 25.748 cv109.037 27.9936 li109.413 28.4737 li110.321 27.7778 li113.945 32.3985 li113.037 33.0944 li113.385 33.5384 li116.12 31.4413 li115.772 30.9972 licp121.689 27.0055 mo120.719 27.6112 li117.631 22.6169 li118.601 22.0113 li118.281 21.4924 li115.357 23.3176 li115.678 23.8365 li116.648 23.2308 li119.736 28.225 li118.766 28.8307 li119.062 29.3107 li121.986 27.4855 li121.689 27.0055 licp126.955 17.8678 mo127.991 17.384 li127.739 16.8283 li124.962 18.1252 li125.214 18.6808 li126.264 18.1905 li128.065 22.1636 li122.129 19.4479 li120.346 20.2803 li120.598 20.8359 li121.565 20.3843 li122.005 20.6164 li124.266 25.6036 li123.23 26.0875 li123.463 26.6015 li126.24 25.3046 li126.007 24.7906 li124.957 25.281 li123.099 21.1828 li129.248 24.0349 li129.662 23.8414 li126.955 17.8678 licp136.889 19.1763 mo138.008 18.8736 li137.859 18.3293 li134.517 19.2336 li134.666 19.7779 li135.785 19.4751 li136.252 21.1816 li135.813 21.4267 135.615 21.5119 135.321 21.5916 cv133.569 22.0657 131.978 21.1058 131.479 19.2817 cv131.028 17.6341 131.838 16.0877 133.384 15.6694 cv133.958 15.514 134.451 15.5229 135.206 15.682 cv135.391 16.3587 li135.936 16.2112 li135.457 14.4607 li134.912 14.6081 li135.021 15.0053 li134.105 14.9529 133.639 14.9841 133.065 15.1395 cv130.916 15.7211 129.69 17.7119 130.249 19.7567 cv130.816 21.8309 132.832 22.8971 135.055 22.2955 cv135.894 22.0685 136.48 21.7834 137.424 21.1329 cv136.889 19.1763 licp140.236 20.6373 mo140.87 20.8873 141.437 20.9775 142.01 20.8971 cv143.264 20.7217 144.083 19.7293 143.929 18.5959 cv143.795 17.6137 143.367 17.1808 141.969 16.6373 cv141.627 16.5003 141.236 16.3395 140.812 16.1678 cv140.257 15.9374 140.062 15.7491 140.009 15.3561 cv139.924 14.7366 140.339 14.2782 141.049 14.1788 cv141.457 14.1218 141.739 14.1593 142.371 14.3942 cv142.474 15.1498 li143.033 15.0716 li142.786 13.2582 li142.227 13.3364 li142.279 13.7142 li141.808 13.5337 141.355 13.4892 140.857 13.5589 cv139.649 13.728 138.814 14.7225 138.963 15.8106 cv139.084 16.7021 139.609 17.1677 141.029 17.6465 cv142.369 18.1058 142.83 18.4416 142.909 19.0159 cv142.989 19.6052 142.503 20.1044 141.748 20.2101 cv141.234 20.282 140.793 20.2051 140.139 19.927 cv140.032 19.1412 li139.473 19.2194 li139.73 21.1083 li140.289 21.0301 li140.236 20.6373 licp157.472 13.5649 mo154.413 13.3711 li154.372 13.9798 li155.514 14.0522 li155.261 17.8565 li155.178 19.0892 154.298 19.9197 153.156 19.8473 cv152.045 19.7769 151.356 18.8775 151.439 17.6296 cv151.694 13.8101 li152.85 13.8834 li152.891 13.2746 li149.436 13.0557 li149.395 13.6644 li150.552 13.7377 li150.276 17.8769 li150.181 19.3073 151.298 20.4326 152.927 20.5358 cv154.662 20.6457 155.924 19.5948 156.034 17.9513 cv156.29 14.1014 li157.432 14.1736 li157.472 13.5649 licp166.127 16.0857 mo167.238 16.3569 li167.378 15.763 li164.4 15.0364 li164.26 15.6302 li165.386 15.9049 li164.385 20.1506 li161.362 14.2952 li159.451 13.8288 li159.311 14.4227 li160.348 14.6757 li160.554 15.134 li159.297 20.4632 li158.186 20.1921 li158.057 20.7414 li161.035 21.4681 li161.164 20.9188 li160.038 20.644 li161.07 16.2648 li164.178 22.3605 li164.622 22.469 li166.127 16.0857 licp170.491 23.8449 mo169.421 23.4385 li171.519 17.9541 li172.588 18.3606 li172.806 17.7908 li169.584 16.566 li169.366 17.1357 li170.435 17.5422 li168.338 23.0265 li167.269 22.6201 li167.067 23.1472 li170.289 24.372 li170.491 23.8449 licp179.849 21.9181 mo180.416 22.217 li180.696 21.6752 li178.74 20.6432 li178.46 21.1851 li179.229 21.5907 li175.365 24.8802 li175.789 19.776 li176.639 20.2244 li176.919 19.6824 li174.302 18.3017 li174.022 18.8437 li174.683 19.1924 li174.071 26.3531 li174.395 26.5239 li179.849 21.9181 licp183.355 30.2647 mo182.891 29.9432 li182.432 30.6084 li180.301 29.1313 li181.818 26.9349 li183.422 28.047 li182.989 28.6746 li183.452 28.9961 li184.657 27.2514 li184.184 26.9425 li183.768 27.545 li182.164 26.4328 li183.611 24.3367 li185.667 25.7617 li185.216 26.4144 li185.667 26.7272 li186.638 25.3214 li186.174 24.9999 li186.001 25.251 li182.065 22.5227 li181.744 22.9871 li182.684 23.6388 li179.323 28.5087 li178.383 27.857 li178.062 28.3214 li182.549 31.432 li183.355 30.2647 licp189.199 36.6031 mo188.887 36.3122 li188.641 36.0835 188.552 35.7507 188.619 35.292 cv188.977 32.791 li189.836 33.3415 190.797 33.2146 191.485 32.4587 cv192.316 31.5447 192.177 30.5192 191.094 29.5112 cv188.459 27.0588 li188.049 27.5101 li188.886 28.2895 li184.935 32.6335 li184.098 31.8542 li183.718 32.2717 li186.241 34.6202 li186.621 34.2027 li185.783 33.4233 li187.487 31.5503 li188.034 32.0594 li187.576 34.988 li187.465 35.6766 187.514 35.8048 188.005 36.2621 cv188.82 37.0206 li189.199 36.6031 licp189.734 29.0792 mo190.516 29.8066 li191.096 30.347 191.091 30.9877 190.516 31.6196 cv189.952 32.2402 189.226 32.3355 188.69 31.8367 cv187.897 31.0989 li189.734 29.0792 licp189.932 37.8476 mo190.062 38.5204 190.289 39.0489 190.663 39.4914 cv191.48 40.4581 192.75 40.6139 193.618 39.8688 cv194.371 39.2231 194.505 38.6258 194.213 37.1473 cv194.145 36.7836 194.071 36.365 193.989 35.9132 cv193.885 35.3185 193.939 35.0514 194.24 34.7931 cv194.714 34.3858 195.32 34.4885 195.783 35.0359 cv196.049 35.3503 196.169 35.6097 196.31 36.2724 cv195.731 36.7692 li196.095 37.2001 li197.484 36.008 li197.12 35.5771 li196.83 35.8254 li196.73 35.3288 196.525 34.9214 196.2 34.5372 cv195.413 33.6055 194.133 33.438 193.299 34.1532 cv192.617 34.7394 192.507 35.4364 192.864 36.8984 cv193.196 38.2822 193.161 38.8549 192.721 39.2324 cv192.269 39.6199 191.591 39.4788 191.099 38.8965 cv190.764 38.5005 190.592 38.085 190.476 37.3807 cv191.078 36.8641 li190.713 36.4332 li189.267 37.675 li189.631 38.1059 li189.932 37.8476 licp195.476 44.6071 mo194.824 43.667 li199.652 40.3252 li200.304 41.2652 li200.805 40.9181 li198.842 38.0854 li198.34 38.4326 li198.992 39.3727 li194.164 42.7144 li193.512 41.7744 li193.048 42.0956 li195.012 44.9282 li195.476 44.6071 licp198.65 50.1334 mo198.046 48.9869 li203.219 46.2098 li204.258 48.1792 li203.506 48.5831 li203.769 49.0822 li205.328 48.2454 li205.065 47.7464 li204.796 47.8907 li202.177 42.9267 li202.446 42.7825 li202.189 42.2969 li200.631 43.1336 li200.887 43.6192 li201.639 43.2153 li202.678 45.1847 li197.505 47.9617 li196.9 46.8152 li196.403 47.082 li198.153 50.4003 li198.65 50.1334 licp202.549 57.2273 mo202.348 56.6999 li201.593 56.9875 li200.672 54.564 li203.166 53.6144 li203.86 55.4391 li203.147 55.7104 li203.348 56.2378 li205.329 55.4836 li205.114 54.9615 li204.43 55.222 li203.736 53.3973 li206.116 52.491 li207.005 54.829 li206.264 55.1111 li206.459 55.6244 li208.055 55.0166 li207.855 54.4891 li207.57 54.5977 li205.868 50.1213 li205.341 50.3221 li205.747 51.3913 li200.217 53.4968 li199.811 52.4277 li199.283 52.6284 li201.223 57.732 li202.549 57.2273 licp203.333 63.5352 mo203.026 62.2758 li208.732 60.8928 li209.26 63.056 li208.43 63.2572 li208.564 63.8054 li210.283 63.3887 li210.15 62.8404 li209.853 62.9123 li208.523 57.4598 li208.819 57.388 li208.689 56.8546 li206.97 57.2714 li207.1 57.8047 li207.93 57.6036 li208.458 59.7667 li202.751 61.1497 li202.444 59.8904 li201.895 60.0232 li202.785 63.6681 li203.333 63.5352 li0 0 0 1 cmykf101.144 157.323 mo102.353 157.323 103.333 156.343 103.333 155.134 cv103.333 153.925 102.353 152.946 101.144 152.946 cv99.9349 152.946 98.9551 153.925 98.9551 155.134 cv98.9551 156.343 99.9349 157.323 101.144 157.323 cv0 0 0 1 cmykf72.108 157.308 mo73.3166 157.308 74.2964 156.329 74.2964 155.12 cv74.2964 153.911 73.3166 152.931 72.108 152.931 cv70.8992 152.931 69.9194 153.911 69.9194 155.12 cv69.9194 156.329 70.8992 157.308 72.108 157.308 cv0 0 0 1 cmykf77.8398 157.308 mo79.0484 157.308 80.0282 156.329 80.0282 155.12 cv80.0282 153.911 79.0484 152.931 77.8398 152.931 cv76.6311 152.931 75.6512 153.911 75.6512 155.12 cv75.6512 156.329 76.6311 157.308 77.8398 157.308 cv0 0 0 1 cmykf186.946 157.323 mo188.155 157.323 189.135 156.343 189.135 155.134 cv189.135 153.925 188.155 152.946 186.946 152.946 cv185.738 152.946 184.758 153.925 184.758 155.134 cv184.758 156.343 185.738 157.323 186.946 157.323 cv0 0 0 1 cmykf242.399 157.323 mo243.608 157.323 244.588 156.343 244.588 155.134 cv244.588 153.925 243.608 152.946 242.399 152.946 cv241.19 152.946 240.211 153.925 240.211 155.134 cv240.211 156.343 241.19 157.323 242.399 157.323 cv0 0 0 1 cmykf36.2386 157.294 mo37.4473 157.294 38.4271 156.314 38.4271 155.106 cv38.4271 153.897 37.4473 152.917 36.2386 152.917 cv35.0299 152.917 34.05 153.897 34.05 155.106 cv34.05 156.314 35.0299 157.294 36.2386 157.294 cv0 0 0 1 cmykf52.5764 193.787 mo52.5764 191.381 li42.9854 191.381 li42.9854 193.787 li46.0835 193.787 li46.0835 202.258 li49.4783 202.258 li49.4783 193.787 li52.5764 193.787 licp63.0228 202.258 mo63.0228 199.852 li58.2603 199.852 li58.2603 197.841 li61.9847 197.841 li61.9847 195.6 li58.2603 195.6 li58.2603 193.787 li62.8086 193.787 li62.8086 191.381 li54.8656 191.381 li54.8656 202.258 li63.0228 202.258 licp76.1061 202.258 mo72.2169 196.687 li75.7435 191.381 li71.9038 191.381 li69.2671 195.567 li69.2671 191.381 li65.8724 191.381 li65.8724 202.258 li69.2671 202.258 li69.2671 197.907 li71.9697 202.258 li76.1061 202.258 licp88.9322 202.356 mo88.9322 191.381 li85.834 191.381 li85.834 197.511 li81.78 191.381 li78.2864 191.381 li78.2864 202.241 li81.3845 202.241 li81.3845 195.979 li85.6527 202.356 li88.9322 202.356 licp95.8863 202.258 mo95.8863 191.381 li92.4915 191.381 li92.4915 202.258 li95.8863 202.258 licp107.915 192.156 mo106.679 191.529 105.674 191.117 103.515 191.117 cv101.521 191.117 98.8838 191.991 98.8838 194.43 cv98.8838 195.682 99.6583 196.473 101.043 197.215 cv101.62 197.528 104.042 198.204 104.042 199.11 cv104.042 199.555 103.482 199.769 102.955 199.769 cv101.916 199.769 100.845 199.374 99.6583 198.55 cv98.3729 201.153 li99.7242 201.977 100.713 202.554 103.086 202.554 cv106.003 202.554 107.503 201.137 107.569 199.209 cv107.618 197.907 106.498 196.671 105.163 196.16 cv104.174 195.781 102.526 195.023 102.526 194.496 cv102.526 194.133 102.856 193.82 103.466 193.82 cv104.702 193.82 105.707 194.216 106.663 194.792 cv107.915 192.156 licp120.673 202.258 mo116.784 196.687 li120.311 191.381 li116.471 191.381 li113.834 195.567 li113.834 191.381 li110.439 191.381 li110.439 202.258 li113.834 202.258 li113.834 197.907 li116.537 202.258 li120.673 202.258 licp133.14 202.258 mo128.888 191.381 li125.988 191.381 li121.736 202.258 li125.114 202.258 li125.905 200.082 li128.855 200.082 li129.597 202.258 li133.14 202.258 licp128.245 198.237 mo126.515 198.237 li127.454 195.369 li128.245 198.237 licp151.283 202.258 mo151.283 191.381 li147.889 191.381 li147.889 195.419 li143.621 195.419 li143.621 191.381 li140.226 191.381 li140.226 202.258 li143.621 202.258 li143.621 197.923 li147.889 197.923 li147.889 202.258 li151.283 202.258 licp162.976 189.783 mo162.976 189.107 162.465 188.629 161.789 188.629 cv161.113 188.629 160.603 189.107 160.603 189.783 cv160.603 190.458 161.113 190.936 161.789 190.936 cv162.465 190.936 162.976 190.458 162.976 189.783 cvcp159.317 189.783 mo159.317 189.14 158.79 188.629 158.131 188.629 cv157.455 188.629 156.928 189.14 156.928 189.783 cv156.928 190.442 157.455 190.953 158.131 190.953 cv158.79 190.953 159.317 190.442 159.317 189.783 cvcp165.991 196.819 mo165.991 193.919 163.915 191.101 159.894 191.101 cv155.856 191.101 153.78 193.754 153.78 196.819 cv153.78 199.852 155.889 202.554 159.894 202.554 cv163.882 202.554 165.991 199.736 165.991 196.819 cvcp162.382 196.819 mo162.382 198.879 161.295 199.884 159.894 199.884 cv158.477 199.884 157.389 198.879 157.389 196.819 cv157.389 194.776 158.477 193.771 159.894 193.771 cv161.295 193.771 162.382 194.776 162.382 196.819 cvcp178.28 201.846 mo178.28 196.968 li174.885 196.968 li174.885 199.901 li174.572 199.967 174.391 199.983 174.127 199.983 cv172.347 199.983 171.276 198.896 171.276 196.885 cv171.276 194.957 172.43 193.787 174.308 193.787 cv175.528 193.787 176.072 194.034 176.978 194.693 cv178.214 192.287 li176.83 191.529 175.907 191.117 173.715 191.117 cv169.018 191.117 167.667 194.298 167.667 196.968 cv167.667 200.165 170.024 202.554 173.946 202.554 cv175.544 202.554 177.192 202.258 178.28 201.846 cvcp189.97 192.156 mo188.734 191.529 187.729 191.117 185.57 191.117 cv183.576 191.117 180.94 191.991 180.94 194.43 cv180.94 195.682 181.714 196.473 183.098 197.215 cv183.675 197.528 186.098 198.204 186.098 199.11 cv186.098 199.555 185.537 199.769 185.01 199.769 cv183.972 199.769 182.901 199.374 181.714 198.55 cv180.429 201.153 li181.78 201.977 182.769 202.554 185.142 202.554 cv188.059 202.554 189.558 201.137 189.624 199.209 cv189.674 197.907 188.553 196.671 187.218 196.16 cv186.23 195.781 184.582 195.023 184.582 194.496 cv184.582 194.133 184.911 193.82 185.521 193.82 cv186.757 193.82 187.762 194.216 188.718 194.792 cv189.97 192.156 licp203.058 202.258 mo199.169 196.687 li202.696 191.381 li198.856 191.381 li196.219 195.567 li196.219 191.381 li192.824 191.381 li192.824 202.258 li196.219 202.258 li196.219 197.907 li198.922 202.258 li203.058 202.258 licp216.195 196.819 mo216.195 193.919 214.119 191.101 210.098 191.101 cv206.06 191.101 203.984 193.754 203.984 196.819 cv203.984 199.852 206.093 202.554 210.098 202.554 cv214.086 202.554 216.195 199.736 216.195 196.819 cvcp212.586 196.819 mo212.586 198.879 211.499 199.884 210.098 199.884 cv208.681 199.884 207.593 198.879 207.593 196.819 cv207.593 194.776 208.681 193.771 210.098 193.771 cv211.499 193.771 212.586 194.776 212.586 196.819 cvcp226.073 202.258 mo226.073 199.852 li221.953 199.852 li221.953 191.381 li218.558 191.381 li218.558 202.258 li226.073 202.258 licp238.474 202.258 mo234.222 191.381 li231.322 191.381 li227.07 202.258 li230.448 202.258 li231.239 200.082 li234.189 200.082 li234.931 202.258 li238.474 202.258 licp233.579 198.237 mo231.849 198.237 li232.788 195.369 li233.579 198.237 licp251.39 202.356 mo251.39 191.381 li248.292 191.381 li248.292 197.511 li244.238 191.381 li240.745 191.381 li240.745 202.241 li243.843 202.241 li243.843 195.979 li248.111 202.356 li251.39 202.356 li0 0 0 1 cmykf% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailerAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.14 0)%%+ procset Adobe_CoolType_Core (2.18 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EOF